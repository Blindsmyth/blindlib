# Cursor Rules for Axoloti Sketchy Objects Project

## UUID Management - CRITICAL WORKFLOW
- **MANDATORY**: ALWAYS check for UUID conflicts before creating new objects
- **MANDATORY**: Use the base pattern: 5224773f-18de-4231-8f92-b1f22bb9537X where X is unique
- **MANDATORY**: Generate new UUIDs by incrementing the last digit in the registry
- **MANDATORY**: Document all new UUIDs in this file immediately after creation
- **CRITICAL**: UUID conflicts will cause compilation failures and object loading issues

### UUID WORKFLOW - MUST FOLLOW IN ORDER:
1. **BEFORE creating any object**: Check the UUID registry below for conflicts
2. **WHEN creating object**: Use the next available UUID in sequence
3. **IMMEDIATELY after creating object**: Update this UUID registry
4. **NEVER create object without following steps 1-3**

### UUID ASSIGNMENT RULES:
- **ALWAYS increment the last digit**: If last UUID ends in 85, next must be 86
- **NEVER reuse UUIDs**: Even if object is deleted, UUID is permanently retired
- **ALWAYS document immediately**: Update registry before any other work
- **CHECK TWICE**: Verify no conflicts before and after assignment
- Current UUID registry:
  * sketchy_render.axo: 5224773f-18de-4231-8f92-b1f22bb95372
  * sketchy_render_exp.axo: 5224773f-18de-4231-8f92-b1f22bb95373
  * sketchy_render_optimized.axo: 5224773f-18de-4231-8f92-b1f22bb95375
  * sketchy_render_shared.axo: 5224773f-18de-4231-8f92-b1f22bb95376
  * sketchy_dials_simple.axo: 5224773f-18de-4231-8f92-b1f22bb95377
  * sketchy_font_save.axo: 5224773f-18de-4231-8f92-b1f22bb95378
  * sketchy_font_load.axo: 5224773f-18de-4231-8f92-b1f22bb95379
  * sketchy_font_sd.axo: 5224773f-18de-4231-8f92-b1f22bb9537A
  * sketchy_font.axo: 5224773f-18de-4231-8f92-b1f22bb9537B
  * euclidean_step_length.axo: 5224773f-18de-4231-8f92-b1f22bb9537E
  * int_divide_mapped.axo: 5224773f-18de-4231-8f92-b1f22bb9537F
  * get_param_int_kso.axo: 5224773f-18de-4231-8f92-b1f22bb95380
  * int_power_mapped.axo: 5224773f-18de-4231-8f92-b1f22bb95381
  * int_power_mapped_musical.axo: 5224773f-18de-4231-8f92-b1f22bb95382
  * ldrive_musical.axo: 5224773f-18de-4231-8f92-b1f22bb95383
  * play_ldrive_style.axo: 5224773f-18de-4231-8f92-b1f22bb95384
  * ldrive_safe.axo: 5224773f-18de-4231-8f92-b1f22bb95385
  * play_1_simple.axo: 5224773f-18de-4231-8f92-b1f22bb95386
  * param_write_int.axo: 5224773f-18de-4231-8f92-b1f22bb95387
  * ldub_no_params.axo: 5224773f-18de-4231-8f92-b1f22bb95388
  * midi_cc_send.axo: 5224773f-18de-4231-8f92-b1f22bb95389
  * sketchy_params_midi_send.axo: 5224773f-18de-4231-8f92-b1f22bb9538A
  * midi_pitchbend_int.axo: 5224773f-18de-4231-8f92-b1f22bb9538B
  * radio_selector_layered.axo: 5224773f-18de-4231-8f92-b1f22bb9538C
  * threshold_fixed.axo: 5224773f-18de-4231-8f92-b1f22bb9538D
  * sketchy_objects_compact.axo: 5224773f-18de-4231-8f92-b1f22bb9538E
  * sketchy_texts_compact.axo: 5224773f-18de-4231-8f92-b1f22bb9538F
  * sketchy_render_memory_optimized.axo: 5224773f-18de-4231-8f92-b1f22bb95390
  * note_toggle_default_on.axo: 5224773f-18de-4231-8f92-b1f22bb95391
  * poly_cc_output.axo: 5224773f-18de-4231-8f92-b1f22bb95392
  * int param get half page kso.axo: 5224773f-18de-4231-8f92-b1f22bb95393
  * sample_player_with_position.axo: 5224773f-18de-4231-8f92-b1f22bb95394
  * play min dev.axo: 5224773f-18de-4231-8f92-b1f22bb95395
  * play min pos.axo: 5224773f-18de-4231-8f92-b1f22bb95396
  * pitch_octave_combine.axo: 5224773f-18de-4231-8f92-b1f22bb95397
- **MANDATORY**: Generate new UUIDs by incrementing the last digit in the registry
- **MANDATORY**: Document all new UUIDs in this file immediately after creation

## Axoloti File Format Rules

### .axo files (Object Definitions) - CRITICAL
- **MUST** start with `<objdefs appVersion="1.0.12">` root element
- **MUST** contain `<obj.normal id="object_name" uuid="unique-uuid">` element
- **NEVER** use `<patch>` or `<patchobj>` wrapper in .axo files
- **NEVER** use `<object>` as root element
- Used for creating reusable objects

**Correct .axo structure:**
```xml
<objdefs appVersion="1.0.12">
   <obj.normal id="object_name" uuid="unique-uuid">
      <sDescription>...</sDescription>
      <author>...</author>
      <inlets/>
      <outlets/>
      <code.declaration><![CDATA[...]]></code.declaration>
      <code.init><![CDATA[...]]></code.init>
      <code.krate><![CDATA[...]]></code.krate>
   </obj.normal>
</objdefs>
```

### .axp files (Patch Files)
- **MUST** start with `<patch appVersion="1.0.12">` root element
- **MUST** contain object instances that reference .axo objects
- **REQUIRED**: All objects MUST have `name`, `x`, and `y` attributes
- **CRITICAL**: Object references use `type="directory/object_name"` format

**Correct .axp structure:**
```xml
<patch appVersion="1.0.12">
   <obj type="encoder/sketchy_font_save" uuid="..." name="font_save" x="98" y="14">
      <params/>
      <attribs/>
   </obj>
   <nets/>
</patch>
```

### Common Format Mistakes
❌ **WRONG**: .axo files with `<patch><patchobj>` structure
❌ **WRONG**: .axo files with `<object>` root element  
❌ **WRONG**: Missing `x`, `y`, or `name` attributes in .axp files
❌ **WRONG**: Using `type="patch/object"` for custom objects
❌ **WRONG**: Using underscores in inlet/outlet/attribute/parameter names

✅ **CORRECT**: .axo files use `<objdefs><obj.normal>` structure
✅ **CORRECT**: .axp files use `<patch><obj type="directory/name">` structure
✅ **CORRECT**: All .axp objects have positioning attributes
✅ **CORRECT**: Use camelCase for inlet/outlet/attr/param names: `sequencelength` not `sequence_length`

### Memory Aid
- .a**x**o = o**bject** definition = `<objdefs><obj.normal>` structure
- .a**x**p = **patch** = `<patch><obj type="...">` structure

## Naming Conventions (from Strategy Paper)

### Object Names
- Use descriptive names that indicate function: `sketchy_render_optimized`, `sketchy_dials_fused`
- Follow the pattern: `sketchy_[type]_[variant]`
- Examples: `sketchy_render`, `sketchy_dials`, `sketchy_objects`, `sketchy_texts`, `sketchy_params`, `sketchy_font`

### Instance Names (for compatibility)
- Renderer instances: `sketchy__render` (original), `sketchy__render_optimized`, `sketchy__render_shared`
- Table instances: `sketchy__objects`, `sketchy__texts`, `sketchy__params`, `sketchy__font`
- Dial instances: `sketchy__dials`
- Pager instances: `pager__fixed`

### Type Namespaces
- Use `rootc::instance[objectname]` for type references
- Examples: `rootc::instancesketchy__render`, `rootc::instancesketchy__objects`
- Maintain backward compatibility with existing instance names

### Function Names
- Dial functions: `dial_init()`, `dial_update()`
- Other object functions: `intdisplay_init()`, `select_init()`, `bar_init()`
- Helper functions: `count_tokens()`, `get_token_at_index()`, `getCurrentPage()`

## Code Structure Guidelines

### Object Dependencies
- Always include proper `<depends>` sections
- Required dependencies: `SD1`, `I2CD1`, `SPID1` for renderers
- Include parent objects: `sketchy_objects`, `sketchy_texts`, `sketchy_params`, `sketchy_font`

### Thread Safety
- Use `static THD_WORKING_AREA(waThreadX, 512);` for thread declarations
- Include proper thread function: `static msg_t ThreadX(void *arg)`
- Initialize threads in `code.init` section

### Memory Management
- Use SDRAM for large arrays: `__attribute__ ((section (".sdram")))`
- Use SRAM2 for buffers: `__attribute__ ((section (".sram2")))`
- Prefer object reuse over creating new objects for memory efficiency

## Error Prevention

### Compilation Issues
- Always check function signatures match between renderer and dials objects
- Ensure all required struct types are defined: `dial_t`, `intdisplay_t`, `select_t`, `bar_t`
- Include all required functions: `init()`, `update()`, helper functions
- Check for missing includes and dependencies

### Runtime Issues
- Test minimal changes first before complex optimizations
- Keep working versions as backups
- When crashes occur, revert to last known working version
- Use the original `sketchy_render.axo` as base for optimizations

## Development Workflow

### Before Creating New Objects
1. Check UUID registry for conflicts
2. Verify naming follows conventions
3. Ensure all dependencies are included
4. Test with minimal functionality first
5. **CRITICAL**: Use correct file format (.axo vs .axp)

### When Making Changes
1. Start with the original working object as base
2. Make minimal, incremental changes
3. Test compilation after each change
4. Document changes in comments

### When Issues Arise
1. Identify the specific error
2. Check for UUID conflicts first
3. Verify function signatures match
4. Revert to last working version if needed
5. Make smaller, more targeted changes

## Object-Specific Guidelines

### Renderer Objects
- Must include all object types: `dial_t`, `intdisplay_t`, `select_t`, `bar_t`
- Must provide all init/update functions
- Must include helper functions for pager compatibility
- Use object reuse for memory optimization when possible

### Dial Objects
- Must be compatible with renderer's function signatures
- Use shared objects when available for memory efficiency
- Follow position mapping conventions (8 dials, 4x2 grid)

### Table Objects
- Maintain consistent field definitions
- Use proper registration methods
- Include proper initialization in parent objects

## Testing Guidelines
- Always test compilation before complex changes
- Test with minimal patches first
- Verify object loading and function calls work
- Check for memory usage and performance
- Test with actual hardware when possible

## Documentation
- Add comments explaining complex optimizations
- Document UUID assignments
- Note compatibility requirements
- Include usage examples in descriptions 