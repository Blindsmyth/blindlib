<?xml version="1.0" encoding="UTF-8"?>
<axoloti>
  <object id="patch/object" uuid="91493c0a-d42b-4c73-9461-92ddff16e066">
    <sDescription>Combined dial object that handles 8 dials in a 2x4 grid layout. Each dial can be configured as fractional (unipolar/bipolar), integer, or list selector.</sDescription>
    <license>GPL</license>
    <inlets/>
    <outlets/>
    <displays/>
    <params/>
    <attribs>
      <spinner name="page" MinValue="-127" MaxValue="127" DefaultValue="0"/>
      <table name="config" description="Configuration table for all 8 dials. Each row should contain: mode,param,show_value,label,options,default_value"/>
    </attribs>
    <includes/>
    <code.declaration><![CDATA[
// Configuration structure for each dial
typedef struct {
    uint8_t mode;           // 0=frac unipolar, 1=frac bipolar, 2=int, 3=list
    uint8_t param;          // Parameter index
    bool show_value;        // Show/hide value
    const char* label;      // Label text
    const char* options;    // List options (for mode 3)
    float default_value;    // Default value (for modes 0,1)
} dial_config_t;

// Display structures for each type
rootc::instancesketchy__render::dial_t dials[8];
rootc::instancesketchy__render::intdisplay_t intdisplays[8];
rootc::instancesketchy__render::select_t selects[8];

// Fixed layout positions
const uint8_t DIAL_WIDTH = 24;
const uint8_t DIAL_HEIGHT = 24;
const uint8_t ROW1_Y = 13;
const uint8_t ROW2_Y = 39;
const uint8_t COL_X[4] = {26, 52, 78, 104};

// Parse configuration table
void parse_config(const char* config_str, dial_config_t* config) {
    char* saveptr = NULL;
    char* token;
    char buffer[256];
    
    strncpy(buffer, config_str, sizeof(buffer)-1);
    buffer[sizeof(buffer)-1] = '\0';
    
    // Parse mode
    token = tokenize(buffer, ",", &saveptr);
    if (token) config->mode = atoi(token);
    
    // Parse param
    token = tokenize(NULL, ",", &saveptr);
    if (token) config->param = atoi(token);
    
    // Parse show_value
    token = tokenize(NULL, ",", &saveptr);
    if (token) config->show_value = atoi(token);
    
    // Parse label
    token = tokenize(NULL, ",", &saveptr);
    if (token) config->label = token;
    
    // Parse options
    token = tokenize(NULL, ",", &saveptr);
    if (token) config->options = token;
    
    // Parse default_value
    token = tokenize(NULL, ",", &saveptr);
    if (token) config->default_value = atof(token);
}

// Initialize a single dial based on its configuration
void init_dial(uint8_t index, const dial_config_t* config) {
    switch (config->mode) {
        case 0: // frac unipolar
        case 1: // frac bipolar
            dials[index].page = attr_page;
            dials[index].param = config->param;
            dials[index].is_bipolar = (config->mode == 1);
            dials[index].x = COL_X[index % 4];
            dials[index].y = (index < 4) ? ROW1_Y : ROW2_Y;
            dials[index].width = DIAL_WIDTH;
            dials[index].height = DIAL_HEIGHT;
            dials[index].label = config->label;
            dials[index].show_value = config->show_value;
            dials[index].default_value = config->default_value * (1 << 21);
            parent->instancesketchy__render_i.dial_init(&dials[index]);
            break;
            
        case 2: // int
            intdisplays[index].page = attr_page;
            intdisplays[index].param = config->param;
            intdisplays[index].x = COL_X[index % 4];
            intdisplays[index].y = (index < 4) ? ROW1_Y : ROW2_Y;
            intdisplays[index].width = DIAL_WIDTH;
            intdisplays[index].height = DIAL_HEIGHT;
            intdisplays[index].label = config->label;
            parent->instancesketchy__render_i.intdisplay_init(&intdisplays[index]);
            break;
            
        case 3: // list
            selects[index].page = attr_page;
            selects[index].param = config->param;
            selects[index].x = COL_X[index % 4];
            selects[index].y = (index < 4) ? ROW1_Y : ROW2_Y;
            selects[index].width = DIAL_WIDTH;
            selects[index].height = DIAL_HEIGHT;
            selects[index].is_int = true;
            selects[index].label = config->options;
            parent->instancesketchy__render_i.select_init(&selects[index]);
            break;
    }
}

// Update a single dial based on its configuration
void update_dial(uint8_t index, const dial_config_t* config) {
    switch (config->mode) {
        case 0: // frac unipolar
        case 1: // frac bipolar
            parent->instancesketchy__render_i.dial_update(&dials[index]);
            break;
            
        case 2: // int
            parent->instancesketchy__render_i.intdisplay_update(&intdisplays[index]);
            break;
            
        case 3: // list
            parent->instancesketchy__render_i.select_update(&selects[index]);
            break;
    }
}

// Mode constants
#define MODE_FRAC_UNIPOLAR 0  // 0.0 to 1.0, positive only
#define MODE_FRAC_BIPOLAR  1  // -1.0 to 1.0, bipolar
#define MODE_INT           2  // min to max, integer
#define MODE_LIST          3  // selector mode

// Static dial positions
static const int dialX[8] = {26, 52, 78, 104, 26, 52, 78, 104};
static const int dialY[8] = {13, 13, 13, 13, 39, 39, 39, 39};
static const int dialWidth[8] = {24, 24, 24, 24, 24, 24, 24, 24};
static const int dialHeight[8] = {24, 24, 24, 24, 24, 24, 24, 24};

// Per-page configuration
const char* encoderLabels[64] = {
    // Page 0
    "FIN", "WAV", "PHS", "a", "DET", "FRM", "UNI", "sd",
    // Page 1
    "LFO", "RAT", "DEP", "PH", "WAV", "SYN", "MOD", "AMT",
    // Page 2
    "ATT", "DEC", "SUS", "REL", "CUR", "LEV", "PAN", "MOD",
    // Page 3
    "CUT", "RES", "ENV", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 4
    "DEL", "FDB", "TIM", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 5
    "REV", "SIZ", "DMP", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 6
    "MIX", "PAN", "LEV", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 7
    "MOD", "AMT", "SRC", "DST", "LFO", "WAV", "SYN", "AMT"
};

// Value show/hide settings per page (8 pages x 8 encoders)
const bool showValue[64] = {
    // Page 0
    true, true, true, true, false, false, false, false,
    // Page 1
    true, true, true, true, false, false, false, false,
    // Page 2
    true, true, true, true, false, false, false, false,
    // Page 3
    true, true, true, true, false, false, false, false,
    // Page 4
    true, true, true, true, false, false, false, false,
    // Page 5
    true, true, true, true, false, false, false, false,
    // Page 6
    true, true, true, true, false, false, false, false,
    // Page 7
    true, true, true, true, false, false, false, false
};

// Mode configuration for encoders (8 encoders x multiple layers)
const int8_t encoderModes[64] = {
    0, 0, 0, 1, 0, 0, 0, 1,
    0, 0, 0, 0, 2, 0, 1, 0,
    1, 1, 0, 0, 1, 2, 0, 1,
    0, 0, 0, 1, 1, 1, 2, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
};

// List options for selector mode
const char* listOptions[64] = {
    // Page 0
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    // Page 1-7 (same pattern)
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F",
    "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F", "A,B,C,D,E,F"
};

// Display structures
rootc::instancesketchy__render::dial_t dials[8];
rootc::instancesketchy__render::select_t selects[8];
rootc::instancesketchy__render::intdisplay_t intdisplays[8];

int lastPage = -1;

typedef struct {
    uint8_t box_object_id;
    uint8_t label_object_id;
    uint8_t label_text_id;
    int32_t last_value;
    uint8_t page;
    uint8_t param;
    bool is_bipolar;
    uint8_t x;
    uint8_t y;
    uint8_t width;
    uint8_t height;
    const char* label;
    bool show_value;
    int32_t default_value;
} dial_t;

typedef struct {
    uint8_t box_object_id;
    uint8_t label_object_id;
    uint8_t label_text_id;
    int32_t last_value;
    uint8_t page;
    uint8_t param;
    uint8_t x;
    uint8_t y;
    uint8_t width;
    uint8_t height;
    const char* label;
    uint8_t num_options;
    bool is_int;
} select_t;

typedef struct {
    uint8_t box_object_id;
    uint8_t rms_object_id;
    uint8_t peak_object_id;
    uint8_t page;
    uint8_t x;
    uint8_t y;
    uint8_t width;
    uint8_t height;
    uint8_t rms;    // Q27 format
    uint8_t peak;   // Q27 format
    uint8_t peak_delay;
    uint8_t space;
    bool border;
} meter_t;

typedef struct {
    uint8_t box_object_id;
    uint8_t label_object_id;
    uint8_t label_text_id;
    uint8_t last_value;
    uint8_t page;
    uint8_t param;
    uint8_t x;
    uint8_t y;
    uint8_t width;
    uint8_t height;
    const char* label;
} intdisplay_t;

// Change these variables to uint8_t
uint8_t pixels[8][LCDWIDTH];
uint8_t cpt = 0;
uint8_t *txbuf;
uint8_t *rxbuf;

// Change these variables to uint8_t
uint8_t fps_limit_counter;
bool pprint;
bool prender;
]]></code.declaration>
    <code.init><![CDATA[
// Parse configuration table and initialize all dials
dial_config_t config;
for (uint8_t i = 0; i < 8; i++) {
    parse_config(attr_config[i], &config);
    init_dial(i, &config);
}]]></code.init>
    <code.krate><![CDATA[
// Update all dials
dial_config_t config;
for (uint8_t i = 0; i < 8; i++) {
    parse_config(attr_config[i], &config);
    update_dial(i, &config);
}]]></code.krate>
  </object>
</axoloti> 