<?xml version="1.0" encoding="UTF-8"?>
<axoloti>
  <patchobj type="patch/object" uuid="5224773f-18de-4231-8f92-b1f22bb95372" name="sketchy_render" x="0" y="0">
    <params/>
    <attribs>
      <combo attributeName="type" selection="SSD1306"/>
      <combo attributeName="I2CADDR" selection="0x3C"/>
    </attribs>
    <object id="patch/object" uuid="5224773f-18de-4231-8f92-b1f22bb95372">
      <sDescription>The renderer object continuously renders visual objects to a connected SSD1306/1106 OLED display. Objects and texts must be defined and configured in the respective tables. Use a sketchy/object/table and sketchy/object/update to initialize and configure all visual elements. For rendering text you will also need a sketchy/text/table and sketchy/text/update. If you do not want to render text, just initialize an empty sketchy/text/table and set entries to 0.</sDescription>
      <author>Karlo Sono</author>
      <license>MIT</license>
      <inlets>
        <int32.positive name="page" description="set current page"/>
        <int32.positive name="layout" description="set layout page (always visible)"/>
        <bool32.rising name="print" description="Will log the state of the object table to axoloti window"/>
      </inlets>
      <outlets>
        <int32.positive name="sw" description="screen width"/>
        <int32.positive name="sh" description="screen height"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
        <combo name="type">
          <MenuEntries>
            <string>SSD1306</string>
            <string>SH1106</string>
          </MenuEntries>
          <CEntries>
            <string>1306</string>
            <string>1106</string>
          </CEntries>
        </combo>
        <combo name="I2CADDR">
          <MenuEntries>
            <string>0x3C</string>
            <string>0x3D</string>
          </MenuEntries>
          <CEntries>
            <string>0x3C</string>
            <string>0x3D</string>
          </CEntries>
        </combo>
      </attribs>
      <includes/>
      <depends>
        <depend>SD1</depend>
        <depend>I2CD1</depend>
        <depend>SPID1</depend>
      </depends>
      <code.declaration><![CDATA[
rootc::instancesketchy__objects* object_table;
rootc::instancesketchy__texts* text_table;
rootc::instancesketchy__params* param_table;
rootc::instancesketchy__font* font;

uint8_t page;
uint8_t layout;

enum SSD1306 {
  LCDWIDTH            = 128,
  LCDHEIGHT           = 64,
  SETCONTRAST         = 0x81,
  DISPLAYON           = 0xAF,
  DISPLAYOFF          = 0xAE,
  DISPLAYALLON_RESUME = 0xA4,
  NORMALDISPLAY       = 0xA6,
  DEACTIVATE_SCROLL   = 0x2E,
  MEMORYMODE          = 0x20,
  COLUMNADDR          = 0x21,
  PAGEADDR            = 0x22,
  SETSTARTLINE_0      = 0x40,
  SEGREMAP            = 0xA0,
  SETMULTIPLEX        = 0xA8,
  COMSCANDEC          = 0xC8,
  SETDISPLAYOFFSET    = 0xD3,
  SETCOMPINS          = 0xDA,
  SETDISPLAYCLOCKDIV  = 0xD5,
  SETPRECHARGE        = 0xD9,
  SETVCOMDETECT       = 0xDB,
  CHARGEPUMP          = 0x8D,
  EXTERNALVCC         = 0x1,
  SWITCHCAPVCC        = 0x2,
};

uint8_t pixels[8][LCDWIDTH];
uint8_t cpt = 0;
uint8_t *txbuf;
uint8_t *rxbuf;

// SETUP
void cmd(uint8_t c) {
  txbuf[0] = 0;
  txbuf[1] = c;
  i2cMasterTransmitTimeout(
    &I2CD1, attr_I2CADDR, txbuf, 2, rxbuf, 0, 30
  );
}

int wrap_index(int i, int i_max) {
  return ((i % i_max) + i_max) % i_max;
}

void clear() {
  for (uint8_t page = 0; page < 8; page++) {
    for (uint8_t i = 0; i < LCDWIDTH; i++) {
      pixels[page][i] = 0;
    }
  }
}

void sendPage(uint8_t page) {
  cmd(COLUMNADDR); cmd(0); cmd(127);
  cmd(PAGEADDR); cmd(page); cmd(page);

  if (attr_type == 1106) {
    cmd(0xB0 + page);
    cmd(2 & 0xf);
    cmd(0x10 | (2 >> 4));
  }

  txbuf[0] = 0x40;
  memcpy(txbuf + 1, pixels[page], LCDWIDTH);
  i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 129, rxbuf, 0, 30);
}

void init() {
  cmd(DISPLAYOFF);
  cmd(SETDISPLAYCLOCKDIV); cmd(0x80);
  cmd(SETMULTIPLEX); cmd(LCDHEIGHT - 1);
  cmd(SETDISPLAYOFFSET); cmd(attr_type == 1306 ? 0x00 : 0x01);
  cmd(SETSTARTLINE_0);
  cmd(CHARGEPUMP); cmd(0x14);
  cmd(MEMORYMODE); cmd(0x00);
  cmd(SEGREMAP | 0x1);
  cmd(COMSCANDEC);
  cmd(SETCOMPINS); cmd(0x12);
  cmd(SETCONTRAST); cmd(0xCF);
  cmd(SETPRECHARGE); cmd(0xF1);
  cmd(SETVCOMDETECT); cmd(0x40);
  cmd(DISPLAYALLON_RESUME);
  cmd(NORMALDISPLAY);
  cmd(DEACTIVATE_SCROLL);
  cmd(DISPLAYON);
}

void setup() {
  static uint8_t _txbuf[129] __attribute__ ((section (".sram2")));
  static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));
  txbuf = _txbuf;
  rxbuf = _rxbuf;
  init();
}

msg_t ThreadX2() {
  setup();

  while (!chThdShouldTerminate()) {
    clear();
    render();
    for (uint8_t i = 0; i < 8; i++) {
      sendPage(i);
    }
    chThdSleepMilliseconds(32);
  }

  chThdExit((msg_t)0);
}

static msg_t ThreadX(void *arg) {
  ((attr_parent *)arg)->ThreadX2();
}

WORKING_AREA(waThreadX, 2048);
Thread *Thd;

uint8_t fps_limit_counter;
bool pprint;
bool prender;

void draw_pixel(int16_t x, int16_t y, uint8_t color) __attribute__ ((noinline)) {
  if (x < 0 || y < 0 || x >= LCDWIDTH || y >= LCDHEIGHT - 1) {
    return;
  }

  uint8_t page = y / 8;
  uint8_t bit = 0x01 << (y % 8);

  if (color == 0) {
    pixels[page][x] |= bit;
  } else if (color == 1) {
    pixels[page][x] &= ~bit;
  } else if (color == 2) {
    pixels[page][x] ^= bit;
  }
}

void draw_scaled_pixel(int16_t x, int16_t y, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  if (scale == 0) scale = 1;

  for (uint8_t i = 0; i < scale; i++) {
    for (uint8_t j = 0; j < scale; j++) {
      int16_t scaled_x = x * scale + i;
      int16_t scaled_y = y * scale + j;
      draw_pixel(scaled_x, scaled_y, color);
    }
  }
}

void draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx = x1 - x0;
  int16_t dy = abs(y1 - y0);
  int16_t err = dx / 2;
  int16_t ystep = (y0 < y1) ? 1 : -1;

  for (; x0 <= x1; x0++) {
    if (steep) {
      draw_scaled_pixel(y0, x0, color, scale);
    } else {
      draw_scaled_pixel(x0, y0, color, scale);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}

void draw_string_from_index(uint8_t text_id, int16_t x, int16_t y, int16_t w, int16_t h, uint8_t color, bool center, bool center_v = false, uint8_t scale = 1) __attribute__ ((noinline)) {
  const char* str = parent->instancesketchy__texts_i.array[text_id];
  int16_t char_width = 5;
  int16_t char_spacing = 1;
  int16_t total_char_width = char_width + char_spacing;
  int16_t char_height = font->height;
  size_t max_length = parent->instancesketchy__texts_i.STRING_LENGTH;

  int total_lines = 0;
  if (center_v) {
    size_t i = 0;
    while (i < max_length && str[i] != '\0') {
      int line_width = 0;
      size_t last_space = (size_t)-1;
      while (i < max_length && str[i] != '\0' && str[i] != '\n') {
        if (str[i] == ' ') {
          last_space = i;
        }
        if (line_width + total_char_width > w) {
          if (last_space != (size_t)-1) {
            i = last_space + 1;
            break;
          }
        }
        line_width += total_char_width;
        i++;
      }
      total_lines++;
      if (i < max_length && str[i] == '\n') i++;
    }
  }

  int16_t total_height = total_lines * char_height;
  int16_t start_y = center_v ? (y + (h - total_height) / 2) : y;
  start_y = (start_y < y) ? y : start_y;

  size_t i = 0;
  int16_t current_y = start_y;

  while (i < max_length && str[i] != '\0' && current_y + char_height <= y + h) {
    size_t line_start = i;
    int16_t line_width = 0;
    size_t last_space = (size_t)-1;
    
    while (i < max_length && str[i] != '\0' && str[i] != '\n') {
      if (str[i] == ' ') {
        last_space = i;
      }
      if (line_width + total_char_width > w) {
        if (last_space != (size_t)-1) {
          i = last_space;
          line_width = (int16_t)(i - line_start) * total_char_width;
        }
        break;
      }
      line_width += total_char_width;
      i++;
    }
    
    while (i > line_start && str[i - 1] == ' ') {
      i--;
      line_width -= total_char_width;
    }

    int16_t x_offset = center ? (w - (line_width - char_spacing)) / 2 : 0;
    
    for (size_t j = line_start; j < i && j < max_length; j++) {
      int16_t current_x = x + x_offset + (int16_t)(j - line_start) * total_char_width;
      
      if (current_x + char_width <= x + w && current_y + char_height <= y + h) {
        draw_char_clipped(str[j], current_x, current_y, 0, 0, char_width, char_height, color, scale);
      }
    }

    current_y += char_height;
    if (i < max_length && (str[i] == '\n' || str[i] == ' ')) i++;
  }
}

void draw_char_clipped(char c, int16_t x, int16_t y, int16_t clip_x, int16_t clip_y, int16_t clip_w, int16_t clip_h, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  if (c < 32 || c > 127) return;

  int index = (c - 32) * 5;

  for (int col = clip_x; col < clip_x + clip_w && col < 5; col++) {
    uint8_t column_data = font->data[index + col];

    for (int row = clip_y; row < clip_y + clip_h && row < 8; row++) {
      if (column_data & (1 << row)) {
        draw_scaled_pixel(x + col - clip_x, y + row - clip_y, color, scale);
      }
    }
  }
}

void draw_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  if (w == 0 || h == 0) return;

  int16_t x_end = x + w - (w > 0 ? 1 : -1);
  int16_t y_end = y + h - (h > 0 ? 1 : -1);

  draw_line(x, y, x_end, y, color, scale);
  if (h != 1 && h != -1) {
    draw_line(x, y_end, x_end, y_end, color, scale);
  }
  if (w != 1 && w != -1) {
    draw_line(x, y, x, y_end, color, scale);
    draw_line(x_end, y, x_end, y_end, color, scale);
  }
}

void draw_filled_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  if (w == 0 || h == 0) return;

  int16_t x_start = (w > 0) ? x : x + w + 1;
  int16_t x_end = (w > 0) ? x + w : x + 1;
  int16_t y_start = (h > 0) ? y : y + h + 1;
  int16_t y_end = (h > 0) ? y + h : y + 1;

  for (int16_t i = x_start; i != x_end; i += (w > 0 ? 1 : -1)) {
    draw_line(i, y_start, i, y_end - 1, color, scale);
  }
}

void draw_rounded_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  if (abs(w) < 5 || abs(h) < 5) {
    draw_rect(x, y, w, h, color, scale);
    return;
  }

  int16_t x_end = x + w - (w > 0 ? 1 : -1);
  int16_t y_end = y + h - (h > 0 ? 1 : -1);

  draw_line(x + 2, y, x_end - 2, y, color, scale);
  draw_line(x + 2, y_end, x_end - 2, y_end, color, scale);
  draw_line(x, y + 2, x, y_end - 2, color, scale);
  draw_line(x_end, y + 2, x_end, y_end - 2, color, scale);

  draw_scaled_pixel(x + 1, y + 1, color, scale);
  draw_scaled_pixel(x_end - 1, y + 1, color, scale);
  draw_scaled_pixel(x + 1, y_end - 1, color, scale);
  draw_scaled_pixel(x_end - 1, y_end - 1, color, scale);
}

void draw_filled_rounded_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t color, uint8_t scale = 1) __attribute__ ((noinline)) {
  if (abs(w) < 5 || abs(h) < 5) {
    draw_filled_rect(x, y, w, h, color, scale);
    return;
  }

  int16_t x_start = (w > 0) ? x : x + w + 1;
  int16_t x_end = (w > 0) ? x + w : x + 1;
  int16_t y_start = (h > 0) ? y : y + h + 1;
  int16_t y_end = (h > 0) ? y + h : y + 1;

  for (int16_t i = x_start; i != x_end; i += (w > 0 ? 1 : -1)) {
    int16_t start_y = y_start;
    int16_t end_y = y_end - 1;

    if (i == x_start || i == x_end - (w > 0 ? 1 : -1)) {
      start_y += 2;
      end_y -= 2;
    } else if (i == x_start + (w > 0 ? 1 : -1) || i == x_end - (w > 0 ? 2 : -2)) {
      start_y += 1;
      end_y -= 1;
    }

    draw_line(i, start_y, i, end_y, color, scale);
  }
}

void render() __attribute__ ((noinline)) {
  for (uint8_t i = 0; i < parent->instancesketchy__objects_i.LENGTH; i++) {
    if (parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TYPE] == parent->instancesketchy__objects_i.TYPE_INVISIBLE) {
      continue;
    }
    uint8_t current_object_page = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_PAGE];
    if (current_object_page != page && current_object_page != layout) {
      continue;
    }
    
    int16_t x = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_X];
    int16_t y = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_Y];
    int16_t w = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_W];
    int16_t h = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_H];
    uint8_t color = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_COLOR];
    uint8_t scale = parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_SCALE];

    switch (parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TYPE]) {
      case parent->instancesketchy__objects_i.TYPE_RECT:
        draw_rect(x, y, w, h, color, scale);
        break;

      case parent->instancesketchy__objects_i.TYPE_FILLED_RECT:
        draw_filled_rect(x, y, w, h, color, scale);
        break;

      case parent->instancesketchy__objects_i.TYPE_ROUNDED_RECT:
        draw_rounded_rect(x, y, w, h, color, scale);
        break;

      case parent->instancesketchy__objects_i.TYPE_FILLED_ROUNDED_RECT:
        draw_filled_rounded_rect(x, y, w, h, color, scale);
        break;

      case parent->instancesketchy__objects_i.TYPE_LINE:
        if (i > 0 && parent->instancesketchy__objects_i.array[i - 1][parent->instancesketchy__objects_i.FIELD_TYPE] == parent->instancesketchy__objects_i.TYPE_LINE) {
          int16_t prev_x = parent->instancesketchy__objects_i.array[i - 1][parent->instancesketchy__objects_i.FIELD_X];
          int16_t prev_y = parent->instancesketchy__objects_i.array[i - 1][parent->instancesketchy__objects_i.FIELD_Y];
          draw_line(prev_x, prev_y, x, y, color, scale);
        }
        break;

      case parent->instancesketchy__objects_i.TYPE_TEXT:
        draw_string_from_index(
          parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TEXT_ID], 
          x, y, w, h, color, false, false, scale
        );
        break;

      case parent->instancesketchy__objects_i.TYPE_TEXT_CENTER_X:
        draw_string_from_index(
          parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TEXT_ID], 
          x, y, w, h, color, true, false, scale
        );
        break;

      case parent->instancesketchy__objects_i.TYPE_TEXT_CENTER_Y:
        draw_string_from_index(
          parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TEXT_ID], 
          x, y, w, h, color, false, true, scale
        );
        break;

      case parent->instancesketchy__objects_i.TYPE_TEXT_CENTER_BOTH:
        draw_string_from_index(
          parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TEXT_ID], 
          x, y, w, h, color, true, true, scale
        );
        break;
    }
  }

  parent->instancesketchy__objects_i.dirty = false;
}

uint8_t getCurrentPage() __attribute__ ((noinline)) {
  return page;
}

char* tokenize(char* str, const char* delim, char** saveptr) __attribute__ ((noinline)) {
  char* current = str ? str : *saveptr;
  
  if (current == NULL) {
    return NULL;
  }
  
  while (*current && strchr(delim, *current)) {
    current++;
  }
  
  if (*current == '\0') {
    *saveptr = NULL;
    return NULL;
  }
  
  char* start = current;
  
  while (*current && !strchr(delim, *current)) {
    current++;
  }
  
  if (*current) {
    *current = '\0';
    *saveptr = current + 1;
  } else {
    *saveptr = NULL;
  }
  
  return start;
}

char* get_token_at_index(const char* str, int desired_index) __attribute__ ((noinline)) {
  char buffer[256];
  char* saveptr = NULL;
  
  strncpy(buffer, str, sizeof(buffer)-1);
  buffer[sizeof(buffer)-1] = '\0';
  
  char* token = tokenize(buffer, ",", &saveptr);
  for (int i = 0; i < desired_index && token != NULL; i++) {
    token = tokenize(NULL, ",", &saveptr);
  }
  
  return token;
}

int count_tokens(const char* str) __attribute__ ((noinline)) {
  if (!str || *str == '\0') return 0;
  
  int count = 1;
  
  for (const char* p = str; *p != '\0'; p++) {
    if (*p == ',' && *(p+1) != ',' && *(p+1) != '\0') {
      count++;
    }
  }
  
  return count;
}]]></code.declaration>
      <code.init><![CDATA[object_table = &parent->instancesketchy__objects_i;
text_table = &parent->instancesketchy__texts_i;
param_table = &parent->instancesketchy__params_i;
font = &parent->instancesketchy__font_i;

palSetPadMode(GPIOB, 8, PAL_MODE_ALTERNATE(4)|PAL_STM32_PUDR_PULLUP|PAL_STM32_OTYPE_OPENDRAIN);
palSetPadMode(GPIOB, 9, PAL_MODE_ALTERNATE(4)|PAL_STM32_PUDR_PULLUP|PAL_STM32_OTYPE_OPENDRAIN);
static const I2CConfig i2cfg = {
  OPMODE_I2C,
  400000,
  FAST_DUTY_CYCLE_2,
};
i2cStart(&I2CD1, &i2cfg);
Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);

clear();

pprint = false;
page = 0;
layout = 0xFF;]]></code.init>
      <code.dispose><![CDATA[chThdTerminate(Thd);
chThdWait(Thd);
i2cStop(&I2CD1);
palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_ANALOG);]]></code.dispose>
      <code.krate><![CDATA[if (inlet_print && !pprint) {
  pprint = true;
  for (uint8_t i = 0; i < parent->instancesketchy__objects_i.LENGTH; i++) {
    LogTextMessage(
      "i: %3d, type: %3d, x: %3d, y: %3d, w: %3d, h: %3d, color: %3d, text_id: %3d",
      i,
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TYPE],
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_X], 
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_Y], 
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_W],
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_H], 
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_COLOR],
      parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TEXT_ID]
    );
  }
  LogTextMessage("");
}

if (!inlet_print && pprint) {
  pprint = false;
}

if (page != inlet_page) {
  page = inlet_page;
}
if (layout != inlet_layout) {
  layout = inlet_layout;
}

outlet_sw = LCDWIDTH;
outlet_sh = LCDHEIGHT;]]></code.krate>
    </object>
  </patchobj>
</axoloti> 