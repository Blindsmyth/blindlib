<?xml version="1.0" encoding="UTF-8"?>
<axoloti>
  <object>
    <name>sketchy/encoder/dials</name>
    <id>sketchy__encoder__dials</id>
    <category>sketchy/encoder</category>
    <sDescription>8 rotary encoders with acceleration, configurable modes, and dial display.</sDescription>
    <author>Fused by AI</author>
    <license>BSD</license>
    <helpPatch>logic.axh</helpPatch>
    <inlets>
      <bool32.rising name="trig1"/>
      <bool32.rising name="dir1"/>
      <bool32.rising name="trig2"/>
      <bool32.rising name="dir2"/>
      <bool32.rising name="trig3"/>
      <bool32.rising name="dir3"/>
      <bool32.rising name="trig4"/>
      <bool32.rising name="dir4"/>
      <bool32.rising name="trig5"/>
      <bool32.rising name="dir5"/>
      <bool32.rising name="trig6"/>
      <bool32.rising name="dir6"/>
      <bool32.rising name="trig7"/>
      <bool32.rising name="dir7"/>
      <bool32.rising name="trig8"/>
      <bool32.rising name="dir8"/>
      <int32 name="a"/>
    </inlets>
    <outlets>
      <frac32 name="o1"/>
      <frac32 name="o2"/>
      <frac32 name="o3"/>
      <frac32 name="o4"/>
      <frac32 name="o5"/>
      <frac32 name="o6"/>
      <frac32 name="o7"/>
      <frac32 name="o8"/>
    </outlets>
    <displays/>
    <params/>
    <attribs>
      <spinner name="acceltime" MinValue="1" MaxValue="1000" DefaultValue="100"/>
      <spinner name="accelmultiplier" MinValue="1" MaxValue="10" DefaultValue="6"/>
      <spinner name="firstparam" MinValue="0" MaxValue="118" DefaultValue="0"/>
    </attribs>
    <includes/>
    <code.declaration><![CDATA[
// Encoder data
float encoderPos[8];
int accel[8];
uint32_t lastTrigTime[8];
int lastTrigState[8];
int lastA = -1;
uint32_t timeCounter = 0;

// Mode constants
#define MODE_FRAC_UNIPOLAR 0  // 0.0 to 1.0, positive only
#define MODE_FRAC_BIPOLAR  1  // -1.0 to 1.0, bipolar
#define MODE_INT           2  // min to max, integer
#define MODE_SELECTOR      3  // selector mode

// Dial configuration
rootc::instancesketchy__render::dial_t dials[8];

// Labels for each encoder per page (8 pages x 8 encoders)
const char* encoderLabels[64] = {
    // Page 0
    "FIN", "WAV", "PHS", "a", "DET", "FRM", "UNI", "sd",
    // Page 1
    "LFO", "RAT", "DEP", "PH", "WAV", "SYN", "MOD", "AMT",
    // Page 2
    "ATT", "DEC", "SUS", "REL", "CUR", "LEV", "PAN", "MOD",
    // Page 3
    "CUT", "RES", "ENV", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 4
    "DEL", "FDB", "TIM", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 5
    "REV", "SIZ", "DMP", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 6
    "MIX", "PAN", "LEV", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 7
    "MOD", "AMT", "SRC", "DST", "LFO", "WAV", "SYN", "AMT"
};

// Value show/hide settings per page (8 pages x 8 encoders)
const bool showValue[64] = {
    // Page 0
    true, true, true, true, false, false, false, false,
    // Page 1
    true, true, true, true, false, false, false, false,
    // Page 2
    true, true, true, true, false, false, false, false,
    // Page 3
    true, true, true, true, false, false, false, false,
    // Page 4
    true, true, true, true, false, false, false, false,
    // Page 5
    true, true, true, true, false, false, false, false,
    // Page 6
    true, true, true, true, false, false, false, false,
    // Page 7
    true, true, true, true, false, false, false, false
};

// Mode configuration for encoders (8 encoders x multiple layers)
const int8_t encoderModes[64] = {
    0, 0, 0, 1, 0, 0, 0, 1,
    0, 0, 0, 0, 2, 0, 1, 0,
    1, 1, 0, 0, 1, 2, 0, 1,
    0, 0, 0, 1, 1, 1, 2, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
};

const int16_t intMin[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -32, 0, 1, 0,
    0, 0, 0, 0, 0, -100, 0, 0,
    0, 0, 0, 0, 0, 0, -50, -25,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
};

const int16_t intMax[64] = {
    127, 127, 127, 63, 127, 127, 100, 999,
    127, 64, 32, 127, 31, 127, 10, 127,
    50, 200, 127, 127, 255, 99, 127, 8,
    127, 127, 127, 20, 15, 7, 49, 24,
    127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127
};

int intValues[8];

float applyModeConstraints(float value, int mode, int encoderIndex) {
    switch(mode) {
        case MODE_FRAC_UNIPOLAR:
            if(value < 0.0f) return 0.0f;
            if(value > 1.0f) return 1.0f;
            return value;
        case MODE_FRAC_BIPOLAR:
            if(value < -1.0f) return -1.0f;
            if(value > 1.0f) return 1.0f;
            return value;
        case MODE_INT:
        case MODE_SELECTOR:
            return value;
        default:
            return value;
    }
}

void updateIntValue(int encoderIndex, int direction, int layer) {
    int arrayIndex = layer * 8 + encoderIndex;
    int minVal = intMin[arrayIndex];
    int maxVal = intMax[arrayIndex];
    if (direction == 0) {
        intValues[encoderIndex]--;
    } else {
        intValues[encoderIndex]++;
    }
    if (intValues[encoderIndex] < minVal) intValues[encoderIndex] = minVal;
    if (intValues[encoderIndex] > maxVal) intValues[encoderIndex] = maxVal;
}

void loadIntValue(int encoderIndex, int layer) {
    int arrayIndex = layer * 8 + encoderIndex;
    int minVal = intMin[arrayIndex];
    int maxVal = intMax[arrayIndex];
    intValues[encoderIndex] = minVal;
    if (intValues[encoderIndex] < minVal) intValues[encoderIndex] = minVal;
    if (intValues[encoderIndex] > maxVal) intValues[encoderIndex] = maxVal;
}
]]></code.declaration>
    <code.init><![CDATA[
for (int i = 0; i < 8; i++) {
    encoderPos[i] = 0.0f;
    accel[i] = 1;
    lastTrigTime[i] = 0;
    lastTrigState[i] = 0;
    intValues[i] = 0;

    // Initialize dial configuration
    dials[i].page = 0;
    dials[i].param = attr_firstparam + i;  // Use firstparam attribute
    dials[i].is_bipolar = (encoderModes[i] == MODE_FRAC_BIPOLAR);
    dials[i].x = 26 + (i * 26);  // Position dials horizontally
    dials[i].y = (i < 4) ? 13 : 39;  // Position dials in two rows
    dials[i].width = 24;
    dials[i].height = 24;
    dials[i].label = encoderLabels[i];  // Initial label from page 0
    dials[i].show_value = showValue[i];  // Initial show value from page 0
    dials[i].default_value = 0;

    parent->instancesketchy__render_i.dial_init(&dials[i]);
}
lastA = -1;
timeCounter = 0;
]]></code.init>
    <code.krate><![CDATA[
timeCounter++;
int layer = inlet_a;
int layer_offset = layer * 8;

if (inlet_a != lastA && layer >= 0 && layer < 8) {
    for (int i = 0; i < 8; i++) {
        int arrayIndex = layer_offset + i;
        if (arrayIndex >= 64) continue;
        int currentMode = encoderModes[arrayIndex];
        if (currentMode == MODE_INT || currentMode == MODE_SELECTOR) {
            loadIntValue(i, layer);
        } else {
            encoderPos[i] = 0.0f;
            encoderPos[i] = applyModeConstraints(encoderPos[i], currentMode, i);
        }
    }
    lastA = inlet_a;
}

bool trig[8] = {inlet_trig1, inlet_trig2, inlet_trig3, inlet_trig4, 
                inlet_trig5, inlet_trig6, inlet_trig7, inlet_trig8};
bool dir[8]  = {inlet_dir1,  inlet_dir2,  inlet_dir3,  inlet_dir4,  
                inlet_dir5,  inlet_dir6,  inlet_dir7,  inlet_dir8};

for (int i = 0; i < 8; i++) {
    bool edge = (trig[i] == 1) && (lastTrigState[i] == 0);
    lastTrigState[i] = trig[i];
    if (edge) {
        int arrayIndex = layer_offset + i;
        if (arrayIndex >= 64) continue;
        int currentMode = encoderModes[arrayIndex];
        if (currentMode == MODE_INT || currentMode == MODE_SELECTOR) {
            updateIntValue(i, dir[i], layer);
        } else {
            uint32_t diff = timeCounter - lastTrigTime[i];
            if (diff < attr_acceltime) {
                accel[i]++;
                if (accel[i] > attr_accelmultiplier) accel[i] = attr_accelmultiplier;
            } else {
                accel[i] = 1;
            }
            float inc = 0.0078125f * accel[i];
            if (dir[i] == 0) {
                encoderPos[i] -= inc;
            } else {
                encoderPos[i] += inc;
            }
            encoderPos[i] = applyModeConstraints(encoderPos[i], currentMode, i);
        }
        lastTrigTime[i] = timeCounter;
    }
}

// Update dials and write to sketchy param table
rootc::instancesketchy__params* param_table = &parent->instancesketchy__params_i;
rootc::instancesketchy__render* renderer = &parent->instancesketchy__render_i;
int page = renderer->getCurrentPage();
int firstparam = attr_firstparam;

// Update all dials every krate
for (int i = 0; i < 8; i++) {
    int arrayIndex = layer_offset + i;
    if (arrayIndex >= 64) continue;
    
    int currentMode = encoderModes[arrayIndex];
    int32_t value = 0;
    
    if (currentMode == MODE_INT || currentMode == MODE_SELECTOR) {
        value = intValues[i];
    } else {
        value = (int32_t)(encoderPos[i] * (float)(1 << 27));
    }
    
    // Update dial
    dials[i].page = page;
    dials[i].param = firstparam + i;
    dials[i].is_bipolar = (currentMode == MODE_FRAC_BIPOLAR);
    dials[i].label = encoderLabels[arrayIndex];
    dials[i].show_value = showValue[arrayIndex];
    parent->instancesketchy__render_i.dial_update(&dials[i]);
    
    // Write to param table
    param_table->array[page][firstparam + i] = value;
}

// Output values for patch compatibility
outlet_o1 = (layer_offset + 0 < 64 && (encoderModes[layer_offset + 0] == MODE_INT || encoderModes[layer_offset + 0] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[0] * (float)(1 << 27));
outlet_o2 = (layer_offset + 1 < 64 && (encoderModes[layer_offset + 1] == MODE_INT || encoderModes[layer_offset + 1] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[1] * (float)(1 << 27));
outlet_o3 = (layer_offset + 2 < 64 && (encoderModes[layer_offset + 2] == MODE_INT || encoderModes[layer_offset + 2] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[2] * (float)(1 << 27));
outlet_o4 = (layer_offset + 3 < 64 && (encoderModes[layer_offset + 3] == MODE_INT || encoderModes[layer_offset + 3] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[3] * (float)(1 << 27));
outlet_o5 = (layer_offset + 4 < 64 && (encoderModes[layer_offset + 4] == MODE_INT || encoderModes[layer_offset + 4] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[4] * (float)(1 << 27));
outlet_o6 = (layer_offset + 5 < 64 && (encoderModes[layer_offset + 5] == MODE_INT || encoderModes[layer_offset + 5] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[5] * (float)(1 << 27));
outlet_o7 = (layer_offset + 6 < 64 && (encoderModes[layer_offset + 6] == MODE_INT || encoderModes[layer_offset + 6] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[6] * (float)(1 << 27));
outlet_o8 = (layer_offset + 7 < 64 && (encoderModes[layer_offset + 7] == MODE_INT || encoderModes[layer_offset + 7] == MODE_SELECTOR)) ? 0 : (int)(encoderPos[7] * (float)(1 << 27));
]]></code.krate>
    <code.midi><![CDATA[]]></code.midi>
    <code.srate><![CDATA[]]></code.srate>
    <code.displays><![CDATA[]]></code.displays>
    <code.gui><![CDATA[]]></code.gui>
    <code.other><![CDATA[]]></code.other>
  </object>
</axoloti> 