<patch appVersion="1.0.12">
   <patchobj type="patch/object" uuid="2d0d6a48-0d8e-4b8a-9b2e-7c8f9e0a1b2d" name="sketchy_objects_exp" x="322" y="28">
      <params/>
      <attribs>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
         <spinner attributeName="entries" value="5000"/>
      </attribs>
      <object id="patch/object" uuid="2d0d6a48-0d8e-4b8a-9b2e-7c8f9e0a1b2d">
         <sDescription>Expanded object table with 8192 entries (8x normal capacity). Fixes object table overflow for complex patches with many visual elements.</sDescription>
         <author>AI Assistant</author>
         <license>MIT</license>
         <inlets>
            <bool32 name="print"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <text name="init" description="Edit to pre-define some objects when patch starts"/>
            <spinner name="entries" description="Maximum amount of display objects" MinValue="1" MaxValue="8192" DefaultValue="1024"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[// Object table configuration - uses attribute-based sizing
static const uint32_t LENGTH = attr_entries;
static uint16_t object_count = 0;

// Object type constants - accessible as public members
uint8_t TYPE_INVISIBLE = 0;
uint8_t TYPE_RECT = 1;
uint8_t TYPE_FILLED_RECT = 2;
uint8_t TYPE_ROUNDED_RECT = 3;
uint8_t TYPE_FILLED_ROUNDED_RECT = 4;
uint8_t TYPE_LINE = 5;
uint8_t TYPE_TEXT = 6;
uint8_t TYPE_TEXT_CENTER_X = 7;
uint8_t TYPE_TEXT_CENTER_Y = 8;
uint8_t TYPE_TEXT_CENTER_XY = 9;
uint8_t TYPE_TEXT_CENTER_BOTH = 9;  // Alias for original system compatibility
uint8_t TYPE_VIRTUAL_KNOB = 99;     // Match original hardcoded value
uint8_t TYPE_VIRTUAL_KNOB_BIPOLAR = 100; // Match original hardcoded value

// Field constants - accessible as public members
uint8_t FIELD_TYPE = 0;
uint8_t FIELD_X = 1;
uint8_t FIELD_Y = 2;
uint8_t FIELD_W = 3;
uint8_t FIELD_H = 4;
uint8_t FIELD_COLOR = 5;
uint8_t FIELD_SCALE = 6;
uint8_t FIELD_TEXT_ID = 7;
uint8_t FIELD_PAGE = 8;

// Array access
int16_t (*array)[9];

uint16_t registerEntry() {
    if (object_count >= LENGTH) {
        LogTextMessage("WARNING: object table is full! Reusing last available slot!");
        return LENGTH - 1;  
    }

    uint16_t slot = object_count;
    object_count++;
    return slot;
}]]></code.declaration>
         <code.init><![CDATA[object_count = 0;

// Use SDRAM for large table allocation 
static int16_t _array[LENGTH][9] __attribute__ ((section (".sdram")));
array = _array;

// Initialize all entries to zero
memset(_array, 0, sizeof(_array));

attr_init;]]></code.init>
         <code.krate><![CDATA[static bool pprint = false;
if (!pprint && inlet_print) {
	for (uint16_t i = 0; i < object_count; i++) {
		LogTextMessage("object[%d] page: %d, type: %d, x: %d, y: %d, w: %d, h: %d", 
			i, 
			array[i][FIELD_PAGE], 
			array[i][FIELD_TYPE], 
			array[i][FIELD_X], 
			array[i][FIELD_Y],
			array[i][FIELD_W],
			array[i][FIELD_H]);
	}
}

pprint = inlet_print;]]></code.krate>
      </object>
   </patchobj>
   
   <patchobj type="patch/object" uuid="3e1e7b59-1e9f-5c9b-ac3f-8d9f0e1a2b3d" name="sketchy_texts_exp" x="322" y="112">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="3e1e7b59-1e9f-5c9b-ac3f-8d9f0e1a2b3d">
         <sDescription>Expanded text table with 512 entries (4x normal capacity). Fixes text table overflow for complex patches with many text elements.</sDescription>
         <author>AI Assistant</author>
         <license>MIT</license>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[// Text table configuration
#define MAX_TEXTS 512
#define MAX_TEXT_LENGTH 16
static char text_array[MAX_TEXTS][MAX_TEXT_LENGTH];
static uint16_t text_count = 0;

// Array access
char (*array)[MAX_TEXT_LENGTH] = text_array;
uint16_t LENGTH = text_count;

uint16_t registerEntry() {
    if (text_count < MAX_TEXTS) {
        uint16_t id = text_count;
        text_count++;
        LENGTH = text_count;
        
        // Initialize new entry
        text_array[id][0] = '\0';
        
        return id;
    }
    return 0; // Error: table full
}

void itoa(char* str, int value) {
    sprintf(str, "%d", value);
}]]></code.declaration>
         <code.init><![CDATA[text_count = 0;
LENGTH = 0;]]></code.init>
         <code.dispose><![CDATA[// Nothing to dispose]]></code.dispose>
      </object>
   </patchobj>
   
   <patchobj type="patch/object" uuid="a1a2b3c4-d5e6-7890-abcd-ef1234567890" name="sketchy_render_exp" x="322" y="196">
      <params/>
      <attribs>
         <combo attributeName="type" selection="SSD1306"/>
         <combo attributeName="I2CADDR" selection="0x3C"/>
      </attribs>
      <object id="patch/object" uuid="a1a2b3c4-d5e6-7890-abcd-ef1234567890">
         <sDescription>Expanded renderer with 16-bit loop variables. Fixes object table iteration limits beyond 255 objects.</sDescription>
         <author>AI Assistant</author>
         <license>MIT</license>
         <inlets>
            <int32 name="page"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="type" description="Display type">
               <MenuEntries>
                  <string>SSD1306</string>
                  <string>SH1106</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <combo name="I2CADDR" description="I2C Address">
               <MenuEntries>
                  <string>0x3C</string>
                  <string>0x3D</string>
               </MenuEntries>
               <CEntries>
                  <string>0x3C</string>
                  <string>0x3D</string>
               </CEntries>
            </combo>
         </attribs>
         <includes>
            <include>./streamer_impl.h</include>
         </includes>
         <code.declaration><![CDATA[// CRITICAL: 16-bit variables for object table iteration beyond 255 objects
rootc::instancesketchy__objects_exp* object_table;
rootc::instancesketchy__texts_exp* text_table;

uint16_t page = 0;

void render_all_objects() __attribute__ ((noinline)) {
    // FIXED: Changed from uint8_t to uint16_t to handle >255 objects
    for (uint16_t i = 0; i < object_table->object_count; i++) {
        int16_t obj_page = object_table->array[i][object_table->FIELD_PAGE];
        
        // Skip objects not on current page (unless page is 0xFFFF = always visible)
        if (obj_page != page && obj_page != 0xFFFF) continue;
        
        int16_t type = object_table->array[i][object_table->FIELD_TYPE];
        int16_t x = object_table->array[i][object_table->FIELD_X];
        int16_t y = object_table->array[i][object_table->FIELD_Y];
        int16_t w = object_table->array[i][object_table->FIELD_W];
        int16_t h = object_table->array[i][object_table->FIELD_H];
        int16_t color = object_table->array[i][object_table->FIELD_COLOR];
        int16_t text_id = object_table->array[i][object_table->FIELD_TEXT_ID];
        
        // Render based on type
        switch(type) {
            case 0: break; // Invisible
            case 1: draw_rect(x, y, w, h, color, 1); break;
            case 2: draw_filled_rect(x, y, w, h, color, 1); break;
            case 6: 
                if (text_id < text_table->LENGTH) {
                    draw_text(x, y, text_table->array[text_id], color, 1);
                }
                break;
            case 9:
                if (text_id < text_table->LENGTH) {
                    draw_text_center_both(x, y, w, h, text_table->array[text_id], color, 1);
                }
                break;
            case 99: draw_virtual_knob(x, y, color, 1); break;
            case 100: draw_virtual_knob_bipolar(x, y, color, 1); break;
        }
    }
}]]></code.declaration>
         <code.init><![CDATA[object_table = &parent->instancesketchy__objects_exp_i;
text_table = &parent->instancesketchy__texts_exp_i;]]></code.init>
         <code.krate><![CDATA[uint16_t new_page = inlet_page;
if (new_page != page) {
    page = new_page;
    render_all_objects();
}]]></code.krate>
      </object>
   </patchobj>
   
   <obj type="ctrl/button" uuid="ef3d13d6-9f8e-4fa8-a18a-11ac2cf9f405" name="button_2" x="196" y="28">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   
   <nets>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="sketchy_objects_exp" inlet="print"/>
      </net>
   </nets>
   <notes><![CDATA[Complete patch with expanded object table (5000 entries), expanded text table (512 entries), and 16-bit renderer. This fixes object table overflow for complex patches with 64+ dials.]]></notes>
</patch> 