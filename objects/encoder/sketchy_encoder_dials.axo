<objdefs appVersion="1.0.12">
   <obj.normal id="sketchy_encoder_dials" uuid="auto-generated-sketchy-encoder-dials">
      <sDescription>8 rotary encoders with acceleration, configurable modes, and dial display.</sDescription>
      <author>Fused by AI</author>
      <license>BSD</license>
      <helpPatch>logic.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig1"/>
         <bool32.rising name="dir1"/>
         <bool32.rising name="trig2"/>
         <bool32.rising name="dir2"/>
         <bool32.rising name="trig3"/>
         <bool32.rising name="dir3"/>
         <bool32.rising name="trig4"/>
         <bool32.rising name="dir4"/>
         <bool32.rising name="trig5"/>
         <bool32.rising name="dir5"/>
         <bool32.rising name="trig6"/>
         <bool32.rising name="dir6"/>
         <bool32.rising name="trig7"/>
         <bool32.rising name="dir7"/>
         <bool32.rising name="trig8"/>
         <bool32.rising name="dir8"/>
         <int32 name="a"/>
      </inlets>
      <outlets>
         <frac32 name="o1"/>
         <frac32 name="o2"/>
         <frac32 name="o3"/>
         <frac32 name="o4"/>
         <frac32 name="o5"/>
         <frac32 name="o6"/>
         <frac32 name="o7"/>
         <frac32 name="o8"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <spinner name="acceltime" MinValue="1" MaxValue="1000" DefaultValue="100"/>
         <spinner name="accelmultiplier" MinValue="1" MaxValue="10" DefaultValue="6"/>
         <spinner name="firstparam" MinValue="0" MaxValue="118" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[// Encoder data
float encoderPos[8];
int accel[8];
uint32_t lastTrigTime[8];
int lastTrigState[8];
int lastA = -1;
uint32_t timeCounter = 0;

// Mode constants
#define MODE_FRAC_UNIPOLAR 0  // 0.0 to 1.0, positive only
#define MODE_FRAC_BIPOLAR  1  // -1.0 to 1.0, bipolar
#define MODE_INT           2  // min to max, integer
#define MODE_SELECTOR      3  // selector mode

// Dial configuration
rootc::instancesketchy__render::dial_t dials[8];

// Labels for each encoder per page (8 pages x 8 encoders)
const char* encoderLabels[64] = {
    // Page 0
    "FIN", "WAV", "PHS", "a", "DET", "FRM", "UNI", "sd",
    // Page 1
    "LFO", "RAT", "DEP", "PH", "WAV", "SYN", "MOD", "AMT",
    // Page 2
    "ATT", "DEC", "SUS", "REL", "CUR", "LEV", "PAN", "MOD",
    // Page 3
    "CUT", "RES", "ENV", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 4
    "DEL", "FDB", "TIM", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 5
    "REV", "SIZ", "DMP", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 6
    "MIX", "PAN", "LEV", "MOD", "LFO", "WAV", "SYN", "AMT",
    // Page 7
    "MOD", "AMT", "SRC", "DST", "LFO", "WAV", "SYN", "AMT"
};

// Value show/hide settings per page (8 pages x 8 encoders)
const bool showValue[64] = {
    // Page 0
    true, true, true, true, false, false, false, false,
    // Page 1
    true, true, true, true, false, false, false, false,
    // Page 2
    true, true, true, true, false, false, false, false,
    // Page 3
    true, true, true, true, false, false, false, false,
    // Page 4
    true, true, true, true, false, false, false, false,
    // Page 5
    true, true, true, true, false, false, false, false,
    // Page 6
    true, true, true, true, false, false, false, false,
    // Page 7
    true, true, true, true, false, false, false, false
};

// Mode configuration for encoders (8 encoders x multiple layers)
const int8_t encoderModes[64] = {
    0, 0, 0, 1, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 0, 1, 2, 0, 1,
    0, 0, 0, 1, 1, 1, 2, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
};

const int16_t intMin[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -32, 0, 1, 0,
    0, 0, 0, 0, 0, -100, 0, 0,
    0, 0, 0, 0, 0, 0, -50, -25,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
};

const int16_t intMax[64] = {
    127, 127, 127, 63, 127, 127, 100, 999,
    127, 64, 32, 127, 31, 127, 10, 127,
    50, 200, 127, 127, 255, 99, 127, 8,
    127, 127, 127, 20, 15, 7, 49, 24,
    127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127,
    127, 127, 127, 127, 127, 127, 127, 127
};

int intValues[8];

float applyModeConstraints(float value, int mode, int encoderIndex) {
    switch(mode) {
        case MODE_FRAC_UNIPOLAR:
            if(value < 0.0f) return 0.0f;
            if(value > 1.0f) return 1.0f;
            return value;
        case MODE_FRAC_BIPOLAR:
            if(value < -1.0f) return -1.0f;
            if(value > 1.0f) return 1.0f;
            return value;
        case MODE_INT:
        case MODE_SELECTOR:
            return value;
        default:
            return value;
    }
}

void updateIntValue(int encoderIndex, int direction, int layer) {
    int arrayIndex = layer * 8 + encoderIndex;
    int minVal = intMin[arrayIndex];
    int maxVal = intMax[arrayIndex];
    if (direction == 0) {
        intValues[encoderIndex]--;
    } else {
        intValues[encoderIndex]++;
    }
    if (intValues[encoderIndex] < minVal) intValues[encoderIndex] = minVal;
    if (intValues[encoderIndex] > maxVal) intValues[encoderIndex] = maxVal;
}

void loadIntValue(int encoderIndex, int layer) {
    int arrayIndex = layer * 8 + encoderIndex;
    int minVal = intMin[arrayIndex];
    int maxVal = intMax[arrayIndex];
    intValues[encoderIndex] = minVal;
    if (intValues[encoderIndex] < minVal) intValues[encoderIndex] = minVal;
    if (intValues[encoderIndex] > maxVal) intValues[encoderIndex] = maxVal;
}

// Static positions and properties for dials
const int8_t encoderX[8] = {
    26, 52, 78, 104,  // Top row
    26, 52, 78, 104   // Bottom row
};

const int8_t encoderY[8] = {
    13, 13, 13, 13,  // Top row
    39, 39, 39, 39   // Bottom row
};

const int8_t encoderWidth[8] = {24, 24, 24, 24, 24, 24, 24, 24};
const int8_t encoderHeight[8] = {24, 24, 24, 24, 24, 24, 24, 24};

void setupDisplay(int encoderIndex, int page) {
    int arrayIndex = page * 8 + encoderIndex;
    if (arrayIndex >= 64) return;  // Safety check
    
    int currentMode = encoderModes[arrayIndex];
    
    // Setup dial display
    dials[encoderIndex].page = page;
    dials[encoderIndex].param = attr_firstparam + encoderIndex;
    dials[encoderIndex].x = encoderX[encoderIndex];
    dials[encoderIndex].y = encoderY[encoderIndex];
    dials[encoderIndex].width = encoderWidth[encoderIndex];
    dials[encoderIndex].height = encoderHeight[encoderIndex];
    dials[encoderIndex].show_value = showValue[arrayIndex];
    dials[encoderIndex].is_bipolar = (currentMode == MODE_FRAC_BIPOLAR);
    dials[encoderIndex].label = encoderLabels[arrayIndex];
    dials[encoderIndex].default_value = 0;
    
    // Initialize the dial
    parent->instancesketchy__render_i.dial_init(&dials[encoderIndex]);
    parent->instancesketchy__render_i.dial_update(&dials[encoderIndex]);
}]]></code.declaration>
      <code.init><![CDATA[// Initialize encoder positions and timers
for (int i = 0; i < 8; i++) {
    encoderPos[i] = 0.0f;
    accel[i] = 1;
    lastTrigTime[i] = 0;
    lastTrigState[i] = 0;
    intValues[i] = 0;
}

// Initialize all dials for page 0
for (int i = 0; i < 8; i++) {
    setupDisplay(i, 0);
}

timeCounter = 0;]]></code.init>
      <code.krate><![CDATA[timeCounter++;

// Handle page changes
if (inlet_a != lastA && inlet_a >= 0 && inlet_a < 8) {
    // First update all values
    for (int i = 0; i < 8; i++) {
        int arrayIndex = inlet_a * 8 + i;
        if (arrayIndex >= 64) continue;
        
        int currentMode = encoderModes[arrayIndex];
        if (currentMode == MODE_INT || currentMode == MODE_SELECTOR) {
            loadIntValue(i, inlet_a);
        } else {
            encoderPos[i] = 0.0f;
            encoderPos[i] = applyModeConstraints(encoderPos[i], currentMode, i);
        }
    }
    
    // Then update all dials
    for (int i = 0; i < 8; i++) {
        setupDisplay(i, inlet_a);
    }
    
    lastA = inlet_a;
}

// Update all dials every krate
for (int i = 0; i < 8; i++) {
    parent->instancesketchy__render_i.dial_update(&dials[i]);
}

// Handle encoder inputs
for (int i = 0; i < 8; i++) {
    int arrayIndex = inlet_a * 8 + i;
    if (arrayIndex >= 64) continue;
    
    int currentMode = encoderModes[arrayIndex];
    bool trig = inlet_trig[i*2];
    bool dir = inlet_dir[i*2];
    
    if (trig && !lastTrigState[i]) {
        uint32_t now = timeCounter;
        uint32_t delta = now - lastTrigTime[i];
        if (delta < attr_acceltime) {
            accel[i] = attr_accelmultiplier;
        } else {
            accel[i] = 1;
        }
        lastTrigTime[i] = now;
        
        if (currentMode == MODE_INT || currentMode == MODE_SELECTOR) {
            updateIntValue(i, dir, inlet_a);
        } else {
            float delta = dir ? 0.01f : -0.01f;
            delta *= accel[i];
            encoderPos[i] += delta;
            encoderPos[i] = applyModeConstraints(encoderPos[i], currentMode, i);
        }
    }
    lastTrigState[i] = trig;
}

// Update outputs
for (int i = 0; i < 8; i++) {
    int arrayIndex = inlet_a * 8 + i;
    if (arrayIndex >= 64) continue;
    
    int currentMode = encoderModes[arrayIndex];
    if (currentMode == MODE_INT || currentMode == MODE_SELECTOR) {
        outlet_o[i] = intValues[i] << 27;
    } else {
        outlet_o[i] = encoderPos[i] * (1 << 27);
    }
}]]></code.krate>
   </obj.normal>
</objdefs>