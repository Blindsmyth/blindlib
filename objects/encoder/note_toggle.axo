<objdefs appVersion="1.1.0">
   <obj.normal id="note_toggle" uuid="5224773f-18de-4231-8f92-b1f22bb9537D">
      <sDescription>Combined MIDI note input with toggle flipflop - sends MIDI note on/off based on keyboard input and maintains toggle state</sDescription>
      <author>Combined from Johannes Taelman objects</author>
      <license>BSD</license>
      <inlets>
         <bool32.rising name="trig" description="manual trigger"/>
         <bool32.rising name="set" description="set toggle to on"/>
         <bool32.rising name="reset" description="reset toggle to off"/>
      </inlets>
      <outlets>
         <bool32 name="toggle" description="toggle state output"/>
      </outlets>
      <displays>
         <bool32 name="state" noLabel="true"/>
      </displays>
      <params/>
               <attribs>
            <spinner name="note" description="MIDI note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="midichannel" description="MIDI channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <spinner name="value" description="on value" MinValue="0" MaxValue="127" DefaultValue="127"/>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
      <code.declaration><![CDATA[int ntrig;
int p_set;
int p_reset;
int op;
int p_op;]]></code.declaration>
      <code.init><![CDATA[p_set = 0;
p_reset = 0;
op = 0;
p_op = 0;]]></code.init>
      <code.krate><![CDATA[// Handle manual trigger inputs
if (inlet_trig > 0 && !ntrig) {
	op = !op; 
	ntrig = 1;
}
if (inlet_trig <= 0) {
	ntrig = 0;
}

if (inlet_set > 0 && !p_set) {
	op = 1; 
	p_set = 1;
}
if (inlet_set <= 0) {
	p_set = 0;
}

if (inlet_reset > 0 && !p_reset) {
	op = 0; 
	p_reset = 1;
}
if (inlet_reset <= 0) {
	p_reset = 0;
}

// Send MIDI when toggle state changes
if (op != p_op) {
	if (op) {
		MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_midichannel-1), attr_note, op * attr_value);
	} else {
		MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_midichannel-1), attr_note, 0);
		MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (attr_midichannel-1), attr_note, 0);
	}
	p_op = op;
}

// Output values
outlet_toggle = op << 27;
disp_state = op;]]></code.krate>
      <code.midihandler><![CDATA[// Handle MIDI input for toggle functionality
if (status != MIDI_NOTE_ON) {
	return;	
}

if (dev != MIDI_DEVICE_USB_HOST) {
	return;
}

// somehow this is different from attr_device
if (port != 2) {
	return;
}

if (data1 == attr_note && status == MIDI_NOTE_ON + attr_midichannel && data2) {
	op = !op;
}]]></code.midihandler>
   </obj.normal>
</objdefs>