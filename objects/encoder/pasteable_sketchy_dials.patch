<patch appVersion="1.0.12">
   <patchobj type="patch/object" uuid="91493c0a-d42b-4c73-9461-92ddff16e066" name="sketchy_dials" x="812" y="350">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="91493c0a-d42b-4c73-9461-92ddff16e066">
         <sDescription>Combined dial object that handles 8 dials in a 2x4 grid layout. Each dial can be configured differently for each page.</sDescription>
         <license>GPL</license>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[// Configuration structure for each dial
typedef struct {
    uint8_t mode;           // 0=frac unipolar, 1=frac bipolar, 2=int, 3=list
    uint8_t param;          // Parameter index
    bool show_value;        // Show/hide value
    const char* label;      // Label text
    const char* options;    // List options (for mode 3)
    float default_value;    // Default value (for modes 0,1)
} dial_config_t;

// Configuration for 8 pages, 8 dials each (64 total configurations)
const dial_config_t dial_configs[8][8] = {
    // PAGE 0 - Oscillator controls
    {
        {1, 0, true,  "FIN", "", 0.0f},                           // Fine tune
        {1, 1, true,  "WAV", "", 0.0f},                           // Waveform
        {1, 2, true,  "PHS", "", 0.0f},                           // Phase
        {3, 3, false, "", "Sin,Tri,Saw,Sqr,Nse", 0.0f},          // Wave selector
        {0, 4, false, "DET", "", 0.0f},                           // Detune
        {0, 5, false, "SUB", "", 0.0f},                           // Sub osc
        {0, 6, false, "MIX", "", 0.0f},                           // Mix
        {2, 7, false, "OCT", "", 0.0f}                            // Octave
    },
    // PAGE 1 - Filter controls
    {
        {0, 0, true,  "CUT", "", 0.5f},                           // Cutoff
        {1, 1, true,  "RES", "", 0.0f},                           // Resonance
        {1, 2, false, "ENV", "", 0.0f},                           // Env amount
        {3, 3, false, "", "LP,HP,BP,BR", 0.0f},                   // Filter type
        {0, 4, false, "KBD", "", 0.0f},                           // Keyboard track
        {0, 5, false, "VEL", "", 0.0f},                           // Velocity
        {0, 6, false, "LFO", "", 0.0f},                           // LFO amount
        {2, 7, false, "DRV", "", 0.0f}                            // Drive
    },
    // PAGE 2 - Envelope controls
    {
        {0, 0, false, "ATK", "", 0.0f},                           // Attack
        {0, 1, false, "DEC", "", 0.0f},                           // Decay
        {0, 2, false, "SUS", "", 0.7f},                           // Sustain
        {0, 3, false, "REL", "", 0.0f},                           // Release
        {1, 4, false, "VEL", "", 0.0f},                           // Velocity
        {1, 5, false, "CRV", "", 0.0f},                           // Curve
        {0, 6, false, "TIM", "", 0.0f},                           // Time scale
        {3, 7, false, "", "Lin,Exp,Log", 0.0f}                    // Curve type
    },
    // PAGE 3 - LFO controls
    {
        {0, 0, true,  "RAT", "", 0.0f},                           // Rate
        {1, 1, false, "DEP", "", 0.0f},                           // Depth
        {1, 2, false, "PHS", "", 0.0f},                           // Phase
        {3, 3, false, "", "Sin,Tri,Saw,Sqr,S&H", 0.0f},          // LFO shape
        {0, 4, false, "SYN", "", 0.0f},                           // Sync
        {0, 5, false, "DEL", "", 0.0f},                           // Delay
        {0, 6, false, "FAD", "", 0.0f},                           // Fade in
        {2, 7, false, "DIV", "", 0.0f}                            // Division
    },
    // PAGE 4 - Effects controls
    {
        {0, 0, false, "REV", "", 0.0f},                           // Reverb
        {0, 1, false, "DEL", "", 0.0f},                           // Delay
        {0, 2, false, "CHO", "", 0.0f},                           // Chorus
        {0, 3, false, "DIS", "", 0.0f},                           // Distortion
        {1, 4, false, "TIM", "", 0.0f},                           // Delay time
        {1, 5, false, "FBK", "", 0.0f},                           // Feedback
        {0, 6, false, "MIX", "", 0.0f},                           // Wet/Dry
        {3, 7, false, "", "Off,Hall,Room,Plate", 0.0f}            // Reverb type
    },
    // PAGE 5 - Sequencer controls
    {
        {2, 0, true,  "STP", "", 16.0f},                          // Steps
        {0, 1, true,  "SPD", "", 0.5f},                           // Speed
        {1, 2, false, "SWG", "", 0.0f},                           // Swing
        {3, 3, false, "", "Fwd,Rev,P-P,Rnd", 0.0f},              // Direction
        {0, 4, false, "GAT", "", 0.8f},                           // Gate
        {1, 5, false, "ACC", "", 0.0f},                           // Accent
        {0, 6, false, "SLD", "", 0.0f},                           // Slide
        {2, 7, false, "RST", "", 0.0f}                            // Reset
    },
    // PAGE 6 - Modulation controls
    {
        {1, 0, false, "M1A", "", 0.0f},                           // Mod 1 amount
        {1, 1, false, "M2A", "", 0.0f},                           // Mod 2 amount
        {1, 2, false, "M3A", "", 0.0f},                           // Mod 3 amount
        {3, 3, false, "", "LFO,ENV,VEL,RND", 0.0f},              // Mod source
        {3, 4, false, "", "Cut,Res,Amp,Pan", 0.0f},              // Mod dest 1
        {3, 5, false, "", "Pit,Phs,PWM,FM", 0.0f},               // Mod dest 2
        {0, 6, false, "ATN", "", 0.0f},                           // Attenuator
        {2, 7, false, "LAG", "", 0.0f}                            // Lag
    },
    // PAGE 7 - Global controls
    {
        {0, 0, true,  "VOL", "", 0.8f},                           // Volume
        {1, 1, false, "PAN", "", 0.0f},                           // Pan
        {0, 2, false, "TUN", "", 0.0f},                           // Tune
        {2, 3, true,  "TRS", "", 0.0f},                           // Transpose
        {0, 4, false, "VEL", "", 0.8f},                           // Velocity
        {0, 5, false, "POR", "", 0.0f},                           // Portamento
        {2, 6, false, "CHN", "", 1.0f},                           // MIDI channel
        {3, 7, false, "", "Poly,Mono,Leg", 0.0f}                  // Play mode
    }
};

// Display structures for each type - 64 total (8 pages x 8 dials)
rootc::instancesketchy__render::dial_t dials[64];
rootc::instancesketchy__render::intdisplay_t intdisplays[64];
rootc::instancesketchy__render::select_t selects[64];

// Fixed layout positions
const uint8_t DIAL_WIDTH = 24;
const uint8_t DIAL_HEIGHT = 24;
const uint8_t ROW1_Y = 13;
const uint8_t ROW2_Y = 39;
const uint8_t COL_X[4] = {26, 52, 78, 104};

// Initialize a single dial based on its configuration
void init_dial(uint8_t page, uint8_t dial_index, const dial_config_t* config) {
    uint8_t array_index = page * 8 + dial_index;
    
    switch (config->mode) {
        case 0: // frac unipolar
        case 1: // frac bipolar
            dials[array_index].page = page;
            dials[array_index].param = config->param;
            dials[array_index].is_bipolar = (config->mode == 1);
            dials[array_index].x = COL_X[dial_index % 4];
            dials[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            dials[array_index].width = DIAL_WIDTH;
            dials[array_index].height = DIAL_HEIGHT;
            dials[array_index].label = config->label;
            dials[array_index].show_value = config->show_value;
            dials[array_index].default_value = config->default_value * (1 << 21);
            parent->instancesketchy__render_i.dial_init(&dials[array_index]);
            break;
            
        case 2: // int
            intdisplays[array_index].page = page;
            intdisplays[array_index].param = config->param;
            intdisplays[array_index].x = COL_X[dial_index % 4];
            intdisplays[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            intdisplays[array_index].width = DIAL_WIDTH;
            intdisplays[array_index].height = DIAL_HEIGHT;
            intdisplays[array_index].label = config->label;
            parent->instancesketchy__render_i.intdisplay_init(&intdisplays[array_index]);
            break;
            
        case 3: // list
            selects[array_index].page = page;
            selects[array_index].param = config->param;
            selects[array_index].x = COL_X[dial_index % 4];
            selects[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            selects[array_index].width = DIAL_WIDTH;
            selects[array_index].height = DIAL_HEIGHT;
            selects[array_index].is_int = true;
            selects[array_index].label = config->options;
            parent->instancesketchy__render_i.select_init(&selects[array_index]);
            break;
    }
}

// Update a single dial based on its configuration
void update_dial(uint8_t page, uint8_t dial_index, const dial_config_t* config) {
    uint8_t array_index = page * 8 + dial_index;
    
    switch (config->mode) {
        case 0: // frac unipolar
        case 1: // frac bipolar
            parent->instancesketchy__render_i.dial_update(&dials[array_index]);
            break;
            
        case 2: // int
            parent->instancesketchy__render_i.intdisplay_update(&intdisplays[array_index]);
            break;
            
        case 3: // list
            parent->instancesketchy__render_i.select_update(&selects[array_index]);
            break;
    }
}]]></code.declaration>
         <code.init><![CDATA[// Initialize all dials for all pages
for (uint8_t page = 0; page < 8; page++) {
    for (uint8_t dial = 0; dial < 8; dial++) {
        init_dial(page, dial, &dial_configs[page][dial]);
    }
}]]></code.init>
         <code.krate><![CDATA[// Update all dials for all pages
for (uint8_t page = 0; page < 8; page++) {
    for (uint8_t dial = 0; dial < 8; dial++) {
        update_dial(page, dial, &dial_configs[page][dial]);
    }
}]]></code.krate>
      </object>
   </patchobj>
   <nets/>
   <notes><![CDATA[]]></notes>
</patch> 