<objdefs appVersion="1.0.12">
   <obj.normal id="sketchy_params_midi_send_fixed" uuid="5224773f-18de-4231-8f92-b1f22bb9539A">
      <sDescription>Fixed version: Sends parameters from sketchy_param table as MIDI CC messages with improved throttling and no duplicate sends. Only scans the active page for better responsiveness.</sDescription>
      <author>AI Assistant / Simon</author>
      <license>BSD</license>
      <inlets>
         <int32 name="page" description="Current page to send (0-based)"/>
         <int32 name="startcc" description="Starting CC number"/>
         <bool32.rising name="redraw" description="Force resend all parameters on current page"/>
         <bool32 name="active" description="Enable/disable sending"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <spinner name="channel" description="MIDI channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         <spinner name="maxparams" description="Parameters per page" MinValue="1" MaxValue="8" DefaultValue="8"/>
         <spinner name="maxpages" description="Maximum pages for redraw" MinValue="1" MaxValue="64" DefaultValue="9"/>
      </attribs>
      <includes/>
      <depends>
         <depend>SD2</depend>
         <depend>sketchy_params</depend>
      </depends>
      <code.declaration><![CDATA[// Track current page parameters for normal operation
int32_t prev[8];
uint8_t ntrig[8];
int8_t last_page = -1;
uint8_t scan_index;

// Redraw state machine
uint8_t redraw_active;
uint16_t redraw_page;
uint8_t redraw_param;

void SendMidi3(uint8_t b0, uint8_t b1, uint8_t b2) {
    sdPut(&SD2, b0);
    sdPut(&SD2, b1);
    sdPut(&SD2, b2);
}

// Function to convert param value to MIDI CC range (0-127)
uint8_t paramValueToMidiCC(int32_t value) {
    // Convert frac32 format (27-bit) to 7-bit MIDI CC
    // value range: 0 to (1<<27) maps to 0-127
    return (uint8_t)(__USAT(value >> 20, 7));
}]]></code.declaration>
      <code.init><![CDATA[// Initialize tracking arrays
for (int i = 0; i < 8; i++) {
    prev[i] = 0x7FFFFFFF; // Force initial send with impossible value
    ntrig[i] = 0;
}
last_page = -1;
scan_index = 0;
redraw_active = 0;
redraw_page = 0;
redraw_param = 0;]]></code.init>
      <code.krate><![CDATA[// Exit early if not active
if (!inlet_active) return;

// Get param table
rootc::objectinstance_sketchy__params* param_table = &parent->objectinstance_sketchy__params_i;

// --- REDRAW MODE: Send all pages systematically ---
// Trigger redraw on rising edge
if ((inlet_redraw > 0) && !redraw_active) {
    redraw_active = 1;
    redraw_page = 0;
    redraw_param = 0;
}

// Clear redraw on falling edge (after completion)
if (!(inlet_redraw > 0)) {
    redraw_active = 0;
}

// If redraw is active, send parameters throttled across all pages
if (redraw_active) {
    // Send 2 parameters per k-rate cycle during redraw (throttled but reasonable)
    for (int i = 0; i < 2; i++) {
        if (redraw_page >= attr_maxpages) {
            // Finished all pages
            redraw_active = 0;
            break;
        }
        
        if (redraw_param >= attr_maxparams) {
            // Move to next page
            redraw_page++;
            redraw_param = 0;
            if (redraw_page >= attr_maxpages) {
                redraw_active = 0;
                break;
            }
        }
        
        // Get value from param table
        int32_t value = param_table->array[redraw_page][redraw_param];
        uint8_t midiValue = paramValueToMidiCC(value);
        
        // Calculate CC number: page 0 param 0 = startcc, page 0 param 1 = startcc+1
        // page 1 param 0 = startcc+8, etc.
        uint8_t ccNumber = (uint8_t)(inlet_startcc + redraw_param + (redraw_page * attr_maxparams));
        
        // Send if valid CC and buffer has space
        if (ccNumber <= 127 && sdGetTimeout(&SD2, TIME_IMMEDIATE) == MSG_TIMEOUT) {
            SendMidi3(MIDI_CONTROL_CHANGE + (attr_channel - 1), ccNumber, midiValue);
        }
        
        redraw_param++;
    }
    
    // During redraw, skip normal scanning
    return;
}

// --- NORMAL MODE: Scan current page only ---
int8_t current_page = inlet_page;
if (current_page < 0) current_page = 0;

// Page changed - reset tracking for new page
if (current_page != last_page) {
    for (int i = 0; i < attr_maxparams; i++) {
        prev[i] = 0x7FFFFFFF; // Force resend all on page change
        ntrig[i] = 0;
    }
    last_page = current_page;
    scan_index = 0;
}

// IMPROVED THROTTLING: Scan 2 parameters per k-rate cycle
// This gives much better responsiveness while still preventing buffer overflow
// At 3kHz k-rate, this allows 6000 param updates/sec across 8 params = 750 updates/param/sec
for (int scan_count = 0; scan_count < 2; scan_count++) {
    if (scan_index >= attr_maxparams) {
        scan_index = 0;
    }
    
    // Get current value from param table
    int32_t current_value = param_table->array[current_page][scan_index];
    
    // Check if value changed and not already triggered
    if ((current_value != prev[scan_index]) && !ntrig[scan_index]) {
        // Convert to MIDI CC range
        uint8_t midiValue = paramValueToMidiCC(current_value);
        
        // Calculate CC number for current page: param 0 = startcc, param 1 = startcc+1, etc.
        uint8_t ccNumber = (uint8_t)(inlet_startcc + scan_index + (current_page * attr_maxparams));
        
        // Only send if CC number is valid and buffer has space
        if (ccNumber <= 127 && sdGetTimeout(&SD2, TIME_IMMEDIATE) == MSG_TIMEOUT) {
            SendMidi3(MIDI_CONTROL_CHANGE + (attr_channel - 1), ccNumber, midiValue);
            prev[scan_index] = current_value;
            ntrig[scan_index] = 1;
        }
        // If buffer full, don't update prev - will retry next cycle
    }
    
    // Clear trigger when value stabilizes
    if (current_value == prev[scan_index]) {
        ntrig[scan_index] = 0;
    }
    
    scan_index++;
}]]></code.krate>
   </obj.normal>
</objdefs>

