<objdefs appVersion="1.0.12">
   <obj.normal id="virtual_knob" uuid="a1b2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d">
      <sDescription>Virtual knob renderer with lookup table optimization - draws Elektron-style dials directly to display</sDescription>
      <author>AI Assistant</author>
      <license>BSD</license>
      <helpPatch>logic.axh</helpPatch>
      <inlets>
         <int32.positive name="page" description="current page"/>
         <bool32.rising name="print" description="debug print"/>
      </inlets>
      <outlets>
         <int32.positive name="sw" description="screen width"/>
         <int32.positive name="sh" description="screen height"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="type">
            <MenuEntries>
               <string>SSD1306</string>
               <string>SH1106</string>
            </MenuEntries>
            <CEntries>
               <string>1306</string>
               <string>1106</string>
            </CEntries>
         </combo>
         <combo name="I2CADDR">
            <MenuEntries>
               <string>0x3C</string>
               <string>0x3D</string>
            </MenuEntries>
            <CEntries>
               <string>0x3C</string>
               <string>0x3D</string>
            </CEntries>
         </combo>
      </attribs>
      <includes/>
      <depends>
         <depend>SD1</depend>
         <depend>I2CD1</depend>
         <depend>SPID1</depend>
      </depends>
      <code.declaration><![CDATA[// Pre-calculated lookup tables based on Elektron measurements
// Circle coordinates for 24-pixel knob (radius 9)
static const int8_t circle_coords_x[44] = {
    9, 9, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -8, -9,
    -9, -9, -8, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9
};

static const int8_t circle_coords_y[44] = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 8, 8, 7, 6, 5, 4, 3, 2, 1, 
    0, -1, -2, -3, -4, -5, -6, -7, -8, -8, -9, -9, -9, -8, -8, -7, -6, -5, -4, -3, -2, -1
};

// Indicator positions following your numbered sequence (6,7,8,9,10,11,12)
// Starting from bottom and going through 270Â° sweep
static const int8_t indicator_coords_x[27] = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4
};

static const int8_t indicator_coords_y[27] = {
    10, 10, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -9, -9, -9, -8, -7
};

// Simple knob structure
typedef struct {
    uint8_t page;
    uint8_t param;
    uint8_t x;
    uint8_t y;
    uint8_t width;
    uint8_t height;
    const char* label;
    int32_t last_value;  // For change detection
    bool needs_update;
} knob_t;

// Display constants
enum SSD1306 {
    LCDWIDTH            = 128,
    LCDHEIGHT           = 64,
    SETCONTRAST         = 0x81,
    DISPLAYON           = 0xAF,
    DISPLAYOFF          = 0xAE,
    DISPLAYALLON_RESUME = 0xA4,
    NORMALDISPLAY       = 0xA6,
    DEACTIVATE_SCROLL   = 0x2E,
    MEMORYMODE          = 0x20,
    COLUMNADDR          = 0x21,
    PAGEADDR            = 0x22,
    SETSTARTLINE_0      = 0x40,
    SEGREMAP            = 0xA0,
    SETMULTIPLEX        = 0xA8,
    COMSCANDEC          = 0xC8,
    SETDISPLAYOFFSET    = 0xD3,
    SETCOMPINS          = 0xDA,
    SETDISPLAYCLOCKDIV  = 0xD5,
    SETPRECHARGE        = 0xD9,
    SETVCOMDETECT       = 0xDB,
    CHARGEPUMP          = 0x8D,
    EXTERNALVCC         = 0x1,
    SWITCHCAPVCC        = 0x2,
};

// Display buffer
uint8_t *display_buffer;
uint8_t *txbuf;
uint8_t *rxbuf;

uint16_t page;
bool pprint;

// Reference to font and params
rootc::instancesketchy__font* font;
rootc::instancesketchy__params* param_table;

// Knob definitions - 8 knobs per page, 8 pages
knob_t knobs[8][8];

// Fixed layout positions (same as your original)
const uint8_t KNOB_WIDTH = 24;
const uint8_t KNOB_HEIGHT = 24;
const uint8_t ROW1_Y = 13;
const uint8_t ROW2_Y = 39;
const uint8_t COL_X[4] = {26, 52, 78, 104};

// Knob labels for each page
const char* knob_labels[8][8] = {
    // PAGE 0 - Oscillator
    {"FIN", "WAV", "PHS", "TYP", "DET", "SUB", "MIX", "OCT"},
    // PAGE 1 - Filter  
    {"CUT", "RES", "ENV", "TYP", "KBD", "VEL", "LFO", "DRV"},
    // PAGE 2 - Envelope
    {"ATK", "DEC", "SUS", "REL", "VEL", "CRV", "TIM", "TYP"},
    // PAGE 3 - LFO
    {"RAT", "DEP", "PHS", "TYP", "SYN", "DEL", "FAD", "DIV"},
    // PAGE 4 - Effects
    {"REV", "DEL", "CHO", "DIS", "TIM", "FBK", "MIX", "TYP"},
    // PAGE 5 - Sequencer
    {"STP", "SPD", "SWG", "DIR", "GAT", "ACC", "SLD", "RST"},
    // PAGE 6 - Modulation
    {"M1A", "M2A", "M3A", "SRC", "DS1", "DS2", "ATN", "LAG"},
    // PAGE 7 - Global
    {"VOL", "PAN", "TUN", "TRS", "VEL", "POR", "CHN", "MOD"}
};

// OLED communication
void cmd(uint8_t c) {
    txbuf[0] = 0;
    txbuf[1] = c;
    i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 2, rxbuf, 0, 30);
}

void clear_display() {
    for (int page = 0; page < 8; page++) {
        for (int i = 0; i < LCDWIDTH; i++) {
            display_buffer[page * LCDWIDTH + i] = 0;
        }
    }
}

void sendPage(int page_num) {
    cmd(COLUMNADDR); cmd(0); cmd(127);
    cmd(PAGEADDR); cmd(page_num); cmd(page_num);

    if (attr_type == 1106) {
        cmd(0xB0 + page_num);
        cmd(2 & 0xf);
        cmd(0x10 | (2 >> 4));
    }

    txbuf[0] = 0x40;
    memcpy(txbuf + 1, display_buffer + (page_num * LCDWIDTH), LCDWIDTH);
    i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 129, rxbuf, 0, 30);
}

void oled_init() {
    cmd(DISPLAYOFF);
    cmd(SETDISPLAYCLOCKDIV); cmd(0x80);
    cmd(SETMULTIPLEX); cmd(LCDHEIGHT - 1);
    cmd(SETDISPLAYOFFSET); cmd(attr_type == 1306 ? 0x00 : 0x01);
    cmd(SETSTARTLINE_0);
    cmd(CHARGEPUMP); cmd(0x14);
    cmd(MEMORYMODE); cmd(0x00);
    cmd(SEGREMAP | 0x1);
    cmd(COMSCANDEC);
    cmd(SETCOMPINS); cmd(0x12);
    cmd(SETCONTRAST); cmd(0xCF);
    cmd(SETPRECHARGE); cmd(0xF1);
    cmd(SETVCOMDETECT); cmd(0x40);
    cmd(DISPLAYALLON_RESUME);
    cmd(NORMALDISPLAY);
    cmd(DEACTIVATE_SCROLL);
    cmd(DISPLAYON);
}

// Fast pixel drawing
void set_pixel(int x, int y, bool on) {
    if (x < 0 || x >= LCDWIDTH || y < 0 || y >= LCDHEIGHT) return;
    
    int page = y / 8;
    int bit = y % 8;
    int index = page * LCDWIDTH + x;
    
    if (on) {
        display_buffer[index] |= (1 << bit);
    } else {
        display_buffer[index] &= ~(1 << bit);
    }
}

// Fast line drawing
void draw_line(int x0, int y0, int x1, int y1) {
    int dx = abs(x1 - x0);
    int dy = abs(y1 - y0);
    int sx = (x0 < x1) ? 1 : -1;
    int sy = (y0 < y1) ? 1 : -1;
    int err = dx - dy;
    
    while (true) {
        set_pixel(x0, y0, true);
        
        if (x0 == x1 && y0 == y1) break;
        
        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x0 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y0 += sy;
        }
    }
}

// Font rendering
void draw_char(int x, int y, char c) {
    if (c < ' ' || c > '~') return;
    if (!font) return;
    
    int index = (c - ' ') * font->width;
    
    for (int col = 0; col < font->width; col++) {
        uint8_t byte = font->data[index + col];
        for (int row = 0; row < font->height; row++) {
            if (byte & (1 << row)) {
                set_pixel(x + col, y + row, true);
            }
        }
    }
}

void draw_text(int x, int y, const char* text) {
    if (!text || !font) return;
    
    int pos_x = x;
    while (*text && pos_x < LCDWIDTH - font->width) {
        draw_char(pos_x, y, *text);
        pos_x += font->width + 1;
        text++;
    }
}

// OPTIMIZED knob drawing using lookup tables - NO TRIGONOMETRY!
void draw_knob(knob_t* knob) {
    if (!knob) return;
    
    // Get current value from param table
    int32_t value = param_table->array[knob->page][knob->param];
    
    // Calculate knob center
    int cx = knob->x + knob->width/2;
    int cy = knob->y + knob->height/2 - 6;  // Move up for label space
    
    // Draw circle using lookup table - skip bottom section for label
    for (int i = 0; i < 44; i++) {
        int px = cx + circle_coords_x[i];
        int py = cy + circle_coords_y[i];
        
        // Skip bottom gap (roughly where y > cy + 4) for label space
        if (py <= cy + 4) {
            set_pixel(px, py, true);
        }
    }
    
    // Draw indicator using lookup table - super fast!
    float normalized = (float)value / (float)(1 << 27);
    if (normalized < 0.0f) normalized = 0.0f;
    if (normalized > 1.0f) normalized = 1.0f;
    
    // Map to indicator position (0-26) following your numbered sequence
    int indicator_index = (int)(normalized * 26.0f);
    if (indicator_index > 26) indicator_index = 26;
    
    int end_x = cx + indicator_coords_x[indicator_index];
    int end_y = cy + indicator_coords_y[indicator_index];
    
    // Draw indicator line from center to edge
    draw_line(cx, cy, end_x, end_y);
    
    // Draw label below the knob
    if (knob->label && strlen(knob->label) > 0) {
        int text_width = strlen(knob->label) * (font ? font->width + 1 : 6);
        int text_x = knob->x + (knob->width - text_width) / 2;
        int text_y = knob->y + knob->height - (font ? font->height : 8);
        draw_text(text_x, text_y, knob->label);
    }
}

// Initialize all knobs
void init_knobs() {
    for (int p = 0; p < 8; p++) {
        for (int k = 0; k < 8; k++) {
            knobs[p][k].page = p;
            knobs[p][k].param = k;
            knobs[p][k].x = COL_X[k % 4];
            knobs[p][k].y = (k < 4) ? ROW1_Y : ROW2_Y;
            knobs[p][k].width = KNOB_WIDTH;
            knobs[p][k].height = KNOB_HEIGHT;
            knobs[p][k].label = knob_labels[p][k];
            knobs[p][k].last_value = -999999;  // Force initial update
            knobs[p][k].needs_update = true;
        }
    }
}

// Render current page
void render_page() {
    if (page >= 8) return;
    
    // Draw all 8 knobs for current page
    for (int k = 0; k < 8; k++) {
        draw_knob(&knobs[page][k]);
    }
}

// Main render thread
msg_t ThreadX2() {
    chRegSetThreadName("virtual_knob");
    
    // Setup I2C and OLED
    static uint8_t _txbuf[129] __attribute__ ((section (".sdram")));
    static uint8_t _rxbuf[8] __attribute__ ((section (".sdram")));
    txbuf = _txbuf;
    rxbuf = _rxbuf;
    oled_init();
    
    while (!chThdShouldTerminate()) {
        clear_display();
        render_page();
        
        for (uint8_t i = 0; i < 8; i++) {
            sendPage(i);
        }
        
        chThdSleepMilliseconds(50); // 20 FPS - good performance
    }
    
    chThdExit((msg_t)0);
}

static msg_t ThreadX(void *arg) {
    ((attr_parent *)arg)->ThreadX2();
}

WORKING_AREA(waThreadX, 512);
Thread *Thd;]]></code.declaration>
      <code.init><![CDATA[// Create SDRAM shadow arrays for display buffers
static uint8_t _display_buffer[8 * LCDWIDTH] __attribute__ ((section (".sdram")));
display_buffer = &_display_buffer[0];

// Setup I2C pins
palSetPadMode(GPIOB, 8, PAL_MODE_ALTERNATE(4)|PAL_STM32_PUDR_PULLUP|PAL_STM32_OTYPE_OPENDRAIN);// SCL
palSetPadMode(GPIOB, 9, PAL_MODE_ALTERNATE(4)|PAL_STM32_PUDR_PULLUP|PAL_STM32_OTYPE_OPENDRAIN);// SDA
static const I2CConfig i2cfg = {
    OPMODE_I2C,
    400000,
    FAST_DUTY_CYCLE_2,
};
i2cStart(&I2CD1, &i2cfg);

// Initialize variables
pprint = false;
page = 0;

// Get references to other objects
font = &parent->instancesketchy__font_i;
param_table = &parent->instancesketchy__params_i;

// Initialize all knobs
init_knobs();

// Start render thread
Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);]]></code.init>
      <code.dispose><![CDATA[if (Thd) {
    chThdTerminate(Thd);
    chThdWait(Thd);
}
i2cStop(&I2CD1);
palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_ANALOG);]]></code.dispose>
      <code.krate><![CDATA[if (inlet_print && !pprint) {
    pprint = true;
    LogTextMessage("virtual_knob: page %d", page);
}

if (!inlet_print && pprint) {
    pprint = false;
}

if (page != inlet_page) {
    page = inlet_page;
}

outlet_sw = LCDWIDTH;
outlet_sh = LCDHEIGHT;]]></code.krate>
   </obj.normal>
</objdefs> 