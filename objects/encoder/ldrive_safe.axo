<objdefs appVersion="1.0.12">
   <obj.normal id="ldrive_safe" uuid="5224773f-18de-4231-8f92-b1f22bb95385">
      <sDescription>drives a phasor (saw-wave) for reading/writing data - safe for high speeds</sDescription>
      <author>robert schirmer (modified for high speed safety)</author>
      <license>BSD</license>
      <helpPatch>ldrive.axh</helpPatch>
      <inlets>
         <frac32.positive name="offset" description="offset inside the table"/>
         <frac32.positive name="range" description="length of the area to index,or loop end"/>
         <frac32.positive name="startpoint" description="position inside range on reset"/>
         <frac32.bipolar name="speed" description="speed modulation"/>
         <bool32.rising name="play" description="trigger playback"/>
      </inlets>
      <outlets>
         <frac32buffer.positive name="pos" description="relative position inside table"/>
         <int32 name="spos" description="playhead position inside range in samples"/>
         <int32 name="stotal" description="length of range in samples"/>
         <frac32.bipolar name="speed" description="total speed"/>
         <bool32 name="play" description="playback state"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="speed" description="speed ,+ 64 normal speed forward, - 64 backward" noLabel="true">
            <DefaultValue v="64.0"/>
         </frac32.s.map>
      </params>
      <attribs>
         <objref name="table"/>
      </attribs>
      <includes/>
      <code.declaration><![CDATA[int32_t index;
uint8_t shift;

int ntrig;

int32_t t_speed;
int32_t re;
int32_t rs;

int32_t start;
int32_t loopstart;
int32_t lrange;

bool play;]]></code.declaration>
      <code.init><![CDATA[shift = (27-attr_table.LENGTHPOW);]]></code.init>
      <code.krate><![CDATA[//scale ranges up 8 times to achieve decent resolution for parameter speed
lrange = inlet_range << 3;
start = ___SMMUL(inlet_range,inlet_startpoint)<< 8;
re = (t_speed > 0 ) ? lrange - (4 << shift) : lrange;
rs = (t_speed > 0 ) ? start : start -  (4 << shift);

// Safe speed calculation with bounds checking
int32_t total_speed = inlet_speed + param_speed;

// Clamp speed to prevent overflow - max safe value is around 2^28 / 8 = 2^25
if(total_speed > (1 << 25)) {
    total_speed = (1 << 25);  // Clamp to safe maximum
} else if(total_speed < -(1 << 25)) {
    total_speed = -(1 << 25); // Clamp to safe minimum
}

// Calculate t_speed safely
if(total_speed > 0) {
    // For positive speeds, use safe multiplication
    t_speed = ((total_speed << 3) >> attr_table.LENGTHPOW) + 1;
} else if(total_speed < 0) {
    // For negative speeds, use safe division
    t_speed = ((total_speed << 3) >> attr_table.LENGTHPOW);
} else {
    t_speed = 0;
}

if (inlet_play && (!ntrig)) {
    ntrig = 1;
    index = (t_speed < 0) ? lrange:start;
    play = 1; 
}  
else if (!(inlet_play > 0)) ntrig = 0;

if (!inlet_range) play = 0;

outlet_spos =  (((index >> 3) >> shift) > 0) ? ((index >> 3)>> shift) : 0;
outlet_stotal = inlet_range >> shift;
outlet_speed = inlet_speed + param_speed;
outlet_play = play;]]></code.krate>
      <code.srate><![CDATA[if ((index > re)||(index < rs)) play = 0;

if (play){
    outlet_pos =  __USAT(((index >> 3) + inlet_offset),27);
    index += t_speed;
}
else outlet_pos = 1 << 27;]]></code.srate>
   </obj.normal>
</objdefs> 