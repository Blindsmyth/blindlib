<objdefs appVersion="1.0.12">
   <obj.normal id="sketchy_dials_shared" uuid="9a4b5c6d-7e8f-1a2b-3c4d-5e6f7a8b9c0e">
      <sDescription>Shared dial configuration using 6 shared objects for memory efficiency. Uses the same configuration as original dials but calls shared renderer functions.</sDescription>
      <author>AI Assistant</author>
      <license>BSD</license>
      <helpPatch>logic.axh</helpPatch>
      <inlets>
         <int32 name="page"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[// Dial configuration structure
typedef struct {
    uint8_t mode;           // 0=frac unipolar, 1=frac bipolar, 2=int, 3=list, 4=bar unipolar, 5=bar bipolar, 6=duplicate
    bool show_value;        // Show/hide value (for fractional modes)
    const char* label;      // Label text
    const char* options;    // List options (for mode 3) OR duplicate reference "page,dial" (for mode 6)
    float default_value;    // Default value
    int16_t int_min;        // Minimum value (for int/list modes)
    int16_t int_max;        // Maximum value (for int/list modes)
} encoder_dial_config_t;

// Configuration for 8 pages, 8 encoders each (64 total configurations)
// USING SDRAM STRATEGY: Pointer instead of static array
encoder_dial_config_t (*configs)[8];  // Pointer to 2D array in SDRAM

// Mode constants
#define MODE_FRAC_UNIPOLAR 0  // 0.0 to 1.0, positive only
#define MODE_FRAC_BIPOLAR  1  // -1.0 to 1.0, bipolar
#define MODE_INT           2  // min to max, integer
#define MODE_LIST          3  // selector mode
#define MODE_BAR_UNIPOLAR  4  // 0.0 to 1.0, vertical bar
#define MODE_BAR_BIPOLAR   5  // -1.0 to 1.0, vertical bar
#define MODE_DUPLICATE     6  // duplicate another parameter

// Position constants
const uint8_t DIAL_WIDTH = 24;
const uint8_t DIAL_HEIGHT = 24;
const uint8_t ROW1_Y = 13;
const uint8_t ROW2_Y = 39;
const uint8_t COL_X[4] = {26, 52, 78, 104};

// Use the dial_t struct from the renderer
rootc::instancesketchy__render::dial_t dials[64];

// Initialize configuration data in SDRAM
void init_config_data() {
    // PAGE 0 - Oscillator controls
    configs[0][0] = (encoder_dial_config_t){1, true,  "FIN", "", 0.0f, 0, 127};
    configs[0][1] = (encoder_dial_config_t){1, true,  "WAV", "", 32.0f, 0, 127};
    configs[0][2] = (encoder_dial_config_t){3, false, "SEL", "Sin,Tri,Saw,Sqr,Nse", 2.0f, 0, 4};
    configs[0][3] = (encoder_dial_config_t){5, true,  "DOT", "", 32.0f, 0, 127};
    configs[0][4] = (encoder_dial_config_t){0, false, "DET", "", 0.0f, 0, 127};
    configs[0][5] = (encoder_dial_config_t){0, false, "SUB", "", 0.0f, 0, 127};
    configs[0][6] = (encoder_dial_config_t){2, false, "OCT", "", 0.0f, -4, 4};
    configs[0][7] = (encoder_dial_config_t){4, false, "DOWN", "", 0.0f, 0, 127};

    // PAGE 1 - Filter controls
    configs[1][0] = (encoder_dial_config_t){0, true,  "CUT", "", 32.0f, 0, 127};
    configs[1][1] = (encoder_dial_config_t){1, true,  "RES", "", 0.0f, 0, 127};
    configs[1][2] = (encoder_dial_config_t){1, false, "ENV", "", 0.0f, -64, 64};
    configs[1][3] = (encoder_dial_config_t){3, false, "TYP", "LP,HP,BP,BR", 0.0f, 0, 3};
    configs[1][4] = (encoder_dial_config_t){0, false, "KBD", "", 16.0f, 0, 127};
    configs[1][5] = (encoder_dial_config_t){0, false, "VEL", "", 0.0f, 0, 127};
    configs[1][6] = (encoder_dial_config_t){0, false, "LFO", "", 0.0f, 0, 127};
    configs[1][7] = (encoder_dial_config_t){2, false, "DRV", "", 8.0f, 0, 100};

    // PAGE 2 - Envelope controls
    configs[2][0] = (encoder_dial_config_t){0, false, "ATK", "", 8.0f, 0, 127};
    configs[2][1] = (encoder_dial_config_t){0, false, "DEC", "", 16.0f, 0, 127};
    configs[2][2] = (encoder_dial_config_t){0, false, "SUS", "", 48.0f, 0, 127};
    configs[2][3] = (encoder_dial_config_t){0, false, "REL", "", 24.0f, 0, 127};
    configs[2][4] = (encoder_dial_config_t){1, false, "VEL", "", 0.0f, -100, 100};
    configs[2][5] = (encoder_dial_config_t){1, false, "CRV", "", 0.0f, -50, 50};
    configs[2][6] = (encoder_dial_config_t){0, false, "TIM", "", 32.0f, 0, 127};
    configs[2][7] = (encoder_dial_config_t){3, false, "TYP", "Lin,Exp,Log", 1.0f, 0, 2};

    // PAGE 3 - LFO controls
    configs[3][0] = (encoder_dial_config_t){0, true,  "RAT", "", 16.0f, 0, 127};
    configs[3][1] = (encoder_dial_config_t){1, false, "DEP", "", 0.0f, -127, 127};
    configs[3][2] = (encoder_dial_config_t){1, false, "PHS", "", 0.0f, -127, 127};
    configs[3][3] = (encoder_dial_config_t){3, false, "SHP", "Sin,Tri,Saw,Sqr,S&H", 1.0f, 0, 4};
    configs[3][4] = (encoder_dial_config_t){0, false, "SYN", "", 0.0f, 0, 127};
    configs[3][5] = (encoder_dial_config_t){0, false, "DEL", "", 0.0f, 0, 127};
    configs[3][6] = (encoder_dial_config_t){0, false, "FAD", "", 0.0f, 0, 127};
    configs[3][7] = (encoder_dial_config_t){2, false, "DIV", "", 8.0f, 1, 32};

    // PAGE 4 - Effects controls
    configs[4][0] = (encoder_dial_config_t){0, false, "REV", "", 16.0f, 0, 127};
    configs[4][1] = (encoder_dial_config_t){0, false, "DEL", "", 0.0f, 0, 127};
    configs[4][2] = (encoder_dial_config_t){0, false, "CHO", "", 0.0f, 0, 127};
    configs[4][3] = (encoder_dial_config_t){0, false, "DIS", "", 0.0f, 0, 127};
    configs[4][4] = (encoder_dial_config_t){1, false, "TIM", "", 0.0f, -64, 64};
    configs[4][5] = (encoder_dial_config_t){1, false, "FBK", "", 0.0f, -100, 100};
    configs[4][6] = (encoder_dial_config_t){0, false, "MIX", "", 32.0f, 0, 127};
    configs[4][7] = (encoder_dial_config_t){3, false, "TYP", "Off,Hall,Room,Plate", 2.0f, 0, 3};

    // PAGE 5 - Sequencer controls
    configs[5][0] = (encoder_dial_config_t){2, true,  "STP", "", 8.0f, 1, 64};
    configs[5][1] = (encoder_dial_config_t){0, true,  "SPD", "", 32.0f, 0, 127};
    configs[5][2] = (encoder_dial_config_t){1, false, "SWG", "", 0.0f, -50, 50};
    configs[5][3] = (encoder_dial_config_t){3, false, "DIR", "Fwd,Rev,P-P,Rnd", 0.0f, 0, 3};
    configs[5][4] = (encoder_dial_config_t){0, false, "GAT", "", 48.0f, 0, 127};
    configs[5][5] = (encoder_dial_config_t){1, false, "ACC", "", 0.0f, -127, 127};
    configs[5][6] = (encoder_dial_config_t){0, false, "SLD", "", 0.0f, 0, 127};
    configs[5][7] = (encoder_dial_config_t){2, false, "RST", "", 0.0f, 0, 1};

    // PAGE 6 - Modulation controls
    configs[6][0] = (encoder_dial_config_t){1, false, "M1A", "", 0.0f, -127, 127};
    configs[6][1] = (encoder_dial_config_t){1, false, "M2A", "", 0.0f, -127, 127};
    configs[6][2] = (encoder_dial_config_t){1, false, "M3A", "", 0.0f, -127, 127};
    configs[6][3] = (encoder_dial_config_t){3, false, "SRC", "LFO,ENV,VEL,RND", 0.0f, 0, 3};
    configs[6][4] = (encoder_dial_config_t){3, false, "DS1", "Cut,Res,Amp,Pan", 0.0f, 0, 3};
    configs[6][5] = (encoder_dial_config_t){3, false, "DS2", "Pit,Phs,PWM,FM", 0.0f, 0, 3};
    configs[6][6] = (encoder_dial_config_t){0, false, "ATN", "", 64.0f, 0, 127};
    configs[6][7] = (encoder_dial_config_t){2, false, "LAG", "", 0.0f, 0, 100};

    // PAGE 7 - Global controls
    configs[7][0] = (encoder_dial_config_t){0, true,  "VOL", "", 48.0f, 0, 127};
    configs[7][1] = (encoder_dial_config_t){1, false, "PAN", "", 0.0f, -64, 64};
    configs[7][2] = (encoder_dial_config_t){0, false, "TUN", "", 32.0f, 0, 127};
    configs[7][3] = (encoder_dial_config_t){2, true,  "TRS", "", 0.0f, -24, 24};
    configs[7][4] = (encoder_dial_config_t){0, false, "VEL", "", 48.0f, 0, 127};
    configs[7][5] = (encoder_dial_config_t){0, false, "POR", "", 0.0f, 0, 127};
    configs[7][6] = (encoder_dial_config_t){2, false, "CHN", "", 1.0f, 1, 16};
    configs[7][7] = (encoder_dial_config_t){3, false, "PLY", "Poly,Mono,Leg", 0.0f, 0, 2};
}

// Convert from display value to encoder position (0-1)
float displayToEncoderValue(float displayValue, int mode) {
    switch(mode) {
        case MODE_FRAC_UNIPOLAR:
        case MODE_BAR_UNIPOLAR:
            // 0-64 display maps to 0-1 encoder
            return displayValue / 64.0f;
        case MODE_FRAC_BIPOLAR:
        case MODE_BAR_BIPOLAR:
            // -64 to +64 display maps to 0-1 encoder (-64 = 0.0, 0 = 0.5, +64 = 1.0)
            return (displayValue + 64.0f) / 128.0f;
        case MODE_INT:
        case MODE_LIST:
            // Not used for these modes
            return 0.0f;
        default:
            return displayValue;
    }
}

// Parse duplicate reference "page,dial" into page and dial indices
void parse_duplicate_reference(const char* options, uint8_t* ref_page, uint8_t* ref_dial) {
    *ref_page = 0;
    *ref_dial = 0;
    
    // Simple parsing: expect "page,dial" format
    if (options && strlen(options) >= 3) {
        *ref_page = options[0] - '0';  // Convert first char to number
        if (options[1] == ',' && options[2] >= '0' && options[2] <= '7') {
            *ref_dial = options[2] - '0';  // Convert third char to number
        }
    }
}

// Initialize param table with default values
void init_param_table() {
    rootc::instancesketchy__params* param_table = &parent->instancesketchy__params_i;
    
    for (int page = 0; page < 8; page++) {
        for (int enc = 0; enc < 8; enc++) {
            const encoder_dial_config_t* config = &configs[page][enc];
            
            if (config->mode == MODE_INT || config->mode == MODE_LIST) {
                // Initialize integer/list modes to their default values (clamped to range)
                int default_int = (int)config->default_value;
                if (default_int < config->int_min) default_int = config->int_min;
                if (default_int > config->int_max) default_int = config->int_max;
                param_table->array[page][enc] = default_int;
            } else {
                // Initialize fractional modes (knobs and bars): store encoder position (0-1) directly
                float encoder_pos = displayToEncoderValue(config->default_value, config->mode);
                if (encoder_pos < 0.0f) encoder_pos = 0.0f;
                if (encoder_pos > 1.0f) encoder_pos = 1.0f;
                param_table->array[page][enc] = (int32_t)(encoder_pos * (float)(1 << 27));
            }
        }
    }
}]]></code.declaration>
      <code.init><![CDATA[// SDRAM STRATEGY: Create shadow array for configuration data
static encoder_dial_config_t _configs[8][8] __attribute__ ((section (".sdram")));

// Point configs to SDRAM array
configs = _configs;

// Initialize configuration data in SDRAM
init_config_data();

// Initialize param table with default values
init_param_table();]]></code.init>
      <code.dispose><![CDATA[]]></code.dispose>
      <code.krate><![CDATA[int page = inlet_page;

// Create dial structures for each position (using SDRAM for memory efficiency)
static rootc::instancesketchy__render::dial_t dials[64] __attribute__ ((section (".sdram")));

// Update displays for current page only using shared objects
if (page >= 0 && page < 8) {
    for (uint8_t dial = 0; dial < 8; dial++) {
        const encoder_dial_config_t* config = &configs[page][dial];
        
        // Handle duplicate mode by getting the referenced config
        uint8_t actual_type = config->mode;
        uint8_t actual_page = page;
        uint8_t actual_dial = dial;
        const char* actual_label = config->label;
        
        if (config->mode == MODE_DUPLICATE) {
            // Parse the duplicate reference from options field: "page,dial"
            uint8_t ref_page, ref_dial;
            parse_duplicate_reference(config->options, &ref_page, &ref_dial);
            
            // Get the referenced configuration
            if (ref_page < 8 && ref_dial < 8) {
                const encoder_dial_config_t* ref_config = &configs[ref_page][ref_dial];
                
                // Avoid infinite recursion - don't duplicate another duplicate
                if (ref_config->mode != MODE_DUPLICATE) {
                    actual_type = ref_config->mode;
                    actual_page = ref_page;
                    actual_dial = ref_dial;
                    actual_label = ref_config->label;
                }
            }
        }
        
        // Only update if it's a valid type (not duplicate)
        if (actual_type != MODE_DUPLICATE && actual_type < 6) {
            // Set up dial structure
            uint8_t array_index = actual_page * 8 + actual_dial;
            dials[array_index].page = actual_page;
            dials[array_index].param = actual_dial;
            dials[array_index].is_bipolar = (actual_type == MODE_FRAC_BIPOLAR);
            dials[array_index].x = COL_X[actual_dial % 4];
            dials[array_index].y = (actual_dial < 4) ? ROW1_Y : ROW2_Y;
            dials[array_index].width = DIAL_WIDTH;
            dials[array_index].height = DIAL_HEIGHT;
            dials[array_index].label = actual_label;
            dials[array_index].show_value = true;
            
            // Call the original dial_update function (which now uses shared objects)
            parent->instancesketchy__render_i.dial_update(&dials[array_index]);
        }
    }
}]]></code.krate>
   </obj.normal>
</objdefs> 