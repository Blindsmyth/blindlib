<objdefs appVersion="1.0.12">
   <obj.normal id="sketchy_render_optimized" uuid="5224773f-18de-4231-8f92-b1f22bb95375">
      <sDescription>The optimized renderer object with object reuse for memory efficiency. Based on the original sketchy_render with minimal changes.</sDescription>
      <author>AI Assistant</author>
      <license>MIT</license>
      <inlets>
         <int32.positive name="page" description="set current page"/>
         <int32.positive name="layout" description="set layout page (always visible)"/>
         <bool32.rising name="print" description="Will log the state of the object table to axoloti window"/>
      </inlets>
      <outlets>
         <int32.positive name="sw" description="screen width"/>
         <int32.positive name="sh" description="screen height"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="type">
            <MenuEntries>
               <string>SSD1306</string>
               <string>SH1106</string>
            </MenuEntries>
            <CEntries>
               <string>1306</string>
               <string>1106</string>
            </CEntries>
         </combo>
         <combo name="I2CADDR">
            <MenuEntries>
               <string>0x3C</string>
               <string>0x3D</string>
            </MenuEntries>
            <CEntries>
               <string>0x3C</string>
               <string>0x3D</string>
            </CEntries>
         </combo>
      </attribs>
      <includes/>
      <depends>
         <depend>SD1</depend>
         <depend>I2CD1</depend>
         <depend>SPID1</depend>
      </depends>
      <code.declaration><![CDATA[rootc::instancesketchy__objects* object_table;
rootc::instancesketchy__texts* text_table;
rootc::instancesketchy__params* param_table;
rootc::instancesketchy__font* font;

uint16_t page;
uint16_t layout;
bool pprint;

// ================ OBJECT REUSE OPTIMIZATION ================
// Pre-allocated objects for reuse
uint16_t shared_dial_objects[8];  // 8 dial objects (one per position)
uint16_t shared_label_objects[8]; // 8 label objects (one per position)
uint16_t shared_label_texts[8];   // 8 label text objects (one per position)
bool shared_objects_initialized = false;

void init_shared_objects() {
    if (shared_objects_initialized) return;
    
    for (int i = 0; i < 8; i++) {
        // Register shared objects
        shared_dial_objects[i] = object_table->registerEntry();
        shared_label_objects[i] = object_table->registerEntry();
        shared_label_texts[i] = text_table->registerEntry();
        
        // Set to hidden by default
        object_table->array[shared_dial_objects[i]][object_table->FIELD_TYPE] = 0;
        object_table->array[shared_label_objects[i]][object_table->FIELD_TYPE] = 0;
    }
    shared_objects_initialized = true;
}

enum SSD1306 {
	LCDWIDTH            = 128,
	LCDHEIGHT           = 64,
	SETCONTRAST         = 0x81,
	DISPLAYON           = 0xAF,
	DISPLAYOFF          = 0xAE,
	DISPLAYALLON_RESUME = 0xA4,
	NORMALDISPLAY       = 0xA6,
	DEACTIVATE_SCROLL   = 0x2E,
	MEMORYMODE          = 0x20,
	COLUMNADDR          = 0x21,
	PAGEADDR            = 0x22,
	SETSTARTLINE_0      = 0x40,
	SEGREMAP            = 0xA0,
	SETMULTIPLEX        = 0xA8,
	COMSCANDEC          = 0xC8,
	SETDISPLAYOFFSET    = 0xD3,
	SETCOMPINS          = 0xDA,
	SETDISPLAYCLOCKDIV  = 0xD5,
	SETPRECHARGE        = 0xD9,
	SETVCOMDETECT       = 0xDB,
	CHARGEPUMP          = 0x8D,
};

uint8_t pixels[8][LCDWIDTH];
uint8_t *txbuf;
uint8_t *rxbuf;

void cmd(uint8_t c) {
	txbuf[0] = 0;
	txbuf[1] = c;
	i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 2, rxbuf, 0, 30);
}

void clear() {
	for (int page = 0; page < 8; page++) {
		for (int i = 0; i < LCDWIDTH; i++) {
			pixels[page][i] = 0;
		}
	}
}

void sendPage(int page) {
	cmd(COLUMNADDR); cmd(0); cmd(127);
	cmd(PAGEADDR); cmd(page); cmd(page);

	if (attr_type == 1106) {
		cmd(0xB0 + page);
		cmd(2 & 0xf);
		cmd(0x10 | (2 >> 4));
	}

	txbuf[0] = 0x40;
	memcpy(txbuf + 1, pixels[page], LCDWIDTH);
	i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 129, rxbuf, 0, 30);
}

void init() {
	cmd(DISPLAYOFF);
	cmd(SETDISPLAYCLOCKDIV); cmd(0x80);
	cmd(SETMULTIPLEX); cmd(LCDHEIGHT - 1);
	cmd(SETDISPLAYOFFSET); cmd(attr_type == 1306 ? 0x00 : 0x01);
	cmd(SETSTARTLINE_0);
	cmd(CHARGEPUMP); cmd(0x14);
	cmd(MEMORYMODE); cmd(0x00);
	cmd(SEGREMAP | 0x1);
	cmd(COMSCANDEC);
	cmd(SETCOMPINS); cmd(0x12);
	cmd(SETCONTRAST); cmd(0xCF);
	cmd(SETPRECHARGE); cmd(0xF1);
	cmd(SETVCOMDETECT); cmd(0x40);
	cmd(DISPLAYALLON_RESUME);
	cmd(NORMALDISPLAY);
	cmd(DEACTIVATE_SCROLL);
	cmd(DISPLAYON);
}

void setup() {
	static uint8_t _txbuf[129] __attribute__ ((section (".sram2")));
	static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));
	txbuf = _txbuf;
	rxbuf = _rxbuf;
	init();
}

msg_t ThreadX2() {
	setup();
	while (!chThdShouldTerminate()) {
		clear();
		render();
		uint8_t i; 
		for (i = 0; i < 8; i++) {
			sendPage(i);
		}
		chThdSleepMilliseconds(16);
	}
	return 0;
}

void draw_pixel(int x, int y, uint8_t color) {
	if (x < 0 || x >= LCDWIDTH || y < 0 || y >= LCDHEIGHT) return;
	
	int page = y / 8;
	int bit = y % 8;
	
	if (color) {
		pixels[page][x] |= (1 << bit);
	} else {
		pixels[page][x] &= ~(1 << bit);
	}
}

void draw_line(int x0, int y0, int x1, int y1, uint8_t color, uint8_t thickness) {
	int dx = abs(x1 - x0);
	int dy = abs(y1 - y0);
	int sx = x0 < x1 ? 1 : -1;
	int sy = y0 < y1 ? 1 : -1;
	int err = dx - dy;
	
	while (true) {
		for (int t = 0; t < thickness; t++) {
			draw_pixel(x0 + (t - thickness/2), y0, color);
		}
		
		if (x0 == x1 && y0 == y1) break;
		int e2 = 2 * err;
		if (e2 > -dy) {
			err -= dy;
			x0 += sx;
		}
		if (e2 < dx) {
			err += dx;
			y0 += sy;
		}
	}
}

void draw_circle(int cx, int cy, int radius, uint8_t color, uint8_t thickness) {
	for (int i = 0; i < 38; i++) {
		float angle = (2.0f * M_PI * i) / 38;
		int x = cx + (int)(radius * cos(angle));
		int y = cy + (int)(radius * sin(angle));
		
		for (int t = 0; t < thickness; t++) {
			draw_pixel(x + (t - thickness/2), y, color);
		}
	}
}

void draw_filled_circle(int cx, int cy, int radius, uint8_t color) {
	for (int y = -radius; y <= radius; y++) {
		for (int x = -radius; x <= radius; x++) {
			if (x*x + y*y <= radius*radius) {
				draw_pixel(cx + x, cy + y, color);
			}
		}
	}
}

void draw_rect(int x, int y, int w, int h, uint8_t color, uint8_t thickness) {
	for (int t = 0; t < thickness; t++) {
		// Top and bottom lines
		for (int i = x; i < x + w; i++) {
			draw_pixel(i, y + t, color);
			draw_pixel(i, y + h - 1 - t, color);
		}
		// Left and right lines
		for (int i = y; i < y + h; i++) {
			draw_pixel(x + t, i, color);
			draw_pixel(x + w - 1 - t, i, color);
		}
	}
}

void draw_filled_rect(int x, int y, int w, int h, uint8_t color) {
	for (int j = y; j < y + h; j++) {
		for (int i = x; i < x + w; i++) {
			draw_pixel(i, j, color);
		}
	}
}

void draw_text(int x, int y, const char* text, uint8_t color, uint8_t scale) {
	int char_x = x;
	while (*text) {
		if (*text >= 32 && *text <= 126) {
			int char_index = *text - 32;
			for (int row = 0; row < 8; row++) {
				for (int col = 0; col < 6; col++) {
					int index = char_index * 48 + row * 6 + col;
					uint8_t pixel_data = font->data[index];
					if (pixel_data) {
						for (int sy = 0; sy < scale; sy++) {
							for (int sx = 0; sx < scale; sx++) {
								draw_pixel(char_x + col * scale + sx, y + row * scale + sy, color);
							}
						}
					}
				}
			}
		}
		char_x += 6 * scale;
		text++;
	}
}

void draw_text_center(int x, int y, int w, int h, const char* text, uint8_t color, uint8_t scale) {
	// Calculate text width
	int text_width = 0;
	const char* temp = text;
	while (*temp) {
		if (*temp >= 32 && *temp <= 126) {
			text_width += 6 * scale;
		}
		temp++;
	}
	
	// Center text
	int text_x = x + (w - text_width) / 2;
	int text_y = y + (h - 8 * scale) / 2;
	
	draw_text(text_x, text_y, text, color, scale);
}

void render() __attribute__ ((noinline)) {
	// Render all objects in the object table
	for (uint16_t i = 0; i < object_table->LENGTH; i++) {
		int16_t* obj = object_table->array[i];
		uint8_t type = obj[object_table->FIELD_TYPE];
		uint16_t page = obj[object_table->FIELD_PAGE];
		
		// Only render objects for current page or layout page
		if (page != this->page && page != this->layout) continue;
		
		int16_t x = obj[object_table->FIELD_X];
		int16_t y = obj[object_table->FIELD_Y];
		int16_t w = obj[object_table->FIELD_W];
		int16_t h = obj[object_table->FIELD_H];
		uint8_t color = obj[object_table->FIELD_COLOR];
		uint8_t scale = obj[object_table->FIELD_SCALE];
		uint16_t text_id = obj[object_table->FIELD_TEXT_ID];
		
		switch (type) {
			case 1: // Rect
				draw_rect(x, y, w, h, color, 1);
				break;
			case 2: // Filled rect
				draw_filled_rect(x, y, w, h, color);
				break;
			case 3: // Rounded rect
				draw_rect(x, y, w, h, color, 1); // Simplified
				break;
			case 4: // Filled rounded rect
				draw_filled_rect(x, y, w, h, color); // Simplified
				break;
			case 5: // Line
				draw_line(x, y, w, h, color, 1);
				break;
			case 6: // Text
				draw_text(x, y, text_table->array[text_id], color, scale);
				break;
			case 7: // Text center X
				draw_text_center(x, y, w, h, text_table->array[text_id], color, scale);
				break;
			case 8: // Text center Y
				draw_text_center(x, y, w, h, text_table->array[text_id], color, scale);
				break;
			case 9: // Text center XY
				draw_text_center(x, y, w, h, text_table->array[text_id], color, scale);
				break;
			case 99: // Virtual knob (unipolar)
				draw_circle(x, y, h/2, color, 1);
				if (w > 0) {
					float angle = (2.0f * M_PI * w) / 31;
					int indicator_x = x + (int)((h/2 - 2) * cos(angle));
					int indicator_y = y + (int)((h/2 - 2) * sin(angle));
					draw_filled_circle(indicator_x, indicator_y, 2, color);
				}
				break;
			case 100: // Virtual knob (bipolar)
				draw_circle(x, y, h/2, color, 1);
				if (w > 0) {
					float angle = (2.0f * M_PI * w) / 31;
					int indicator_x = x + (int)((h/2 - 2) * cos(angle));
					int indicator_y = y + (int)((h/2 - 2) * sin(angle));
					draw_filled_circle(indicator_x, indicator_y, 2, color);
				}
				// Draw "-" on the left side
				int minus_x = x - 10;
				int minus_y = y + 5;
				draw_line(minus_x - 1, minus_y, minus_x + 1, minus_y, 0, 1);
				// Draw "+" on the right side
				int plus_x = x + 10;
				int plus_y = y + 5;
				draw_line(plus_x - 1, plus_y, plus_x + 1, plus_y, 0, 1);
				draw_line(plus_x, plus_y - 1, plus_x, plus_y + 1, 0, 1);
				break;
		}
	}
}

// Original dial structure for compatibility
typedef struct {
    uint16_t box_object_id;
    uint16_t label_object_id;
    uint16_t label_text_id;
    int32_t last_value;
    int32_t page;
    int32_t param;
    bool is_bipolar;
    int32_t x;
    int32_t y;
    int32_t width;
    int32_t height;
    const char* label;
    bool show_value;
    int32_t default_value;
} dial_t;

// Other object types for compatibility
typedef struct {
    uint16_t box_object_id;
    uint16_t label_object_id;
    uint16_t label_text_id;
    int32_t last_value;
    int32_t page;
    int32_t param;
    int32_t x;
    int32_t y;
    int32_t width;
    int32_t height;
    const char* label;
} intdisplay_t;

typedef struct {
    uint16_t box_object_id;
    uint16_t label_object_id;
    uint16_t label_text_id;
    int32_t last_value;
    int32_t page;
    int32_t param;
    int32_t x;
    int32_t y;
    int32_t width;
    int32_t height;
    bool is_int;
    const char* label;
} select_t;

typedef struct {
    uint16_t box_object_id;
    uint16_t label_object_id;
    uint16_t label_text_id;
    int32_t last_value;
    int32_t page;
    int32_t param;
    bool is_bipolar;
    int32_t x;
    int32_t y;
    int32_t width;
    int32_t height;
    const char* label;
} bar_t;

// Optimized dial functions using shared objects
void dial_init(dial_t* dial) __attribute__ ((noinline)) { 
    // Calculate dial index from position
    uint8_t dial_index = 0;
    const uint8_t COL_X[4] = {26, 52, 78, 104};
    const uint8_t ROW1_Y = 13;
    const uint8_t ROW2_Y = 39;
    
    for (int i = 0; i < 4; i++) {
        if (dial->x == COL_X[i]) {
            dial_index = i;
            break;
        }
    }
    if (dial->y >= ROW2_Y) {
        dial_index += 4; // Second row
    }
    
    // Use shared objects
    dial->box_object_id = shared_dial_objects[dial_index];
    dial->label_object_id = shared_label_objects[dial_index];
    dial->label_text_id = shared_label_texts[dial_index];
    
    // Set up label object
    object_table->array[dial->label_object_id][object_table->FIELD_TYPE] = 9; // Text center
    object_table->array[dial->label_object_id][object_table->FIELD_X] = dial->x;
    object_table->array[dial->label_object_id][object_table->FIELD_Y] = dial->y + dial->height - 11;
    object_table->array[dial->label_object_id][object_table->FIELD_W] = dial->width;
    object_table->array[dial->label_object_id][object_table->FIELD_H] = 8;
    object_table->array[dial->label_object_id][object_table->FIELD_COLOR] = 2;
    object_table->array[dial->label_object_id][object_table->FIELD_TEXT_ID] = dial->label_text_id;
    object_table->array[dial->label_object_id][object_table->FIELD_PAGE] = dial->page;

    // Set up label text
    strcpy(text_table->array[dial->label_text_id], dial->label);
    
    // Set default value and initialize change detection
    param_table->array[dial->page][dial->param] = dial->default_value;
    dial->last_value = -999999;  // Force first update
}

// NEW: Reuse function for dials
void dial_reuse(dial_t* dial, uint8_t position) __attribute__ ((noinline)) {
    // Use shared objects for the specified position
    dial->box_object_id = shared_dial_objects[position];
    dial->label_object_id = shared_label_objects[position];
    dial->label_text_id = shared_label_texts[position];
    
    // Update label object with new data
    object_table->array[dial->label_object_id][object_table->FIELD_TYPE] = 9; // Text center
    object_table->array[dial->label_object_id][object_table->FIELD_X] = dial->x;
    object_table->array[dial->label_object_id][object_table->FIELD_Y] = dial->y + dial->height - 11;
    object_table->array[dial->label_object_id][object_table->FIELD_W] = dial->width;
    object_table->array[dial->label_object_id][object_table->FIELD_H] = 8;
    object_table->array[dial->label_object_id][object_table->FIELD_COLOR] = 2;
    object_table->array[dial->label_object_id][object_table->FIELD_TEXT_ID] = dial->label_text_id;
    object_table->array[dial->label_object_id][object_table->FIELD_PAGE] = dial->page;

    // Update label text
    strcpy(text_table->array[dial->label_text_id], dial->label);
    
    // Force update
    dial->last_value = -999999;
}

void dial_update(dial_t* dial) __attribute__ ((noinline)) {
    // Get table pointers
    rootc::instancesketchy__objects* object_table = &parent->instancesketchy__objects_i;
    rootc::instancesketchy__texts* text_table = &parent->instancesketchy__texts_i;
    rootc::instancesketchy__params* param_table = &parent->instancesketchy__params_i;

    int32_t value = param_table->array[dial->page][dial->param];

    // Abort if value is the same (change detection for performance)
    if (value == dial->last_value) {
        return;
    }

    dial->last_value = value;

    // Calculate dial center (accounting for second row offset)
    bool is_second_row = (dial->y >= 32);
    int y_offset = is_second_row ? 1 : 0;
    int cx = dial->x + dial->width/2;
    int cy = dial->y + y_offset + dial->height/2 - 6;
    
    // Process value differently for bipolar vs unipolar
    float lookup_pos;
    
    if (dial->is_bipolar) {
        // Bipolar: transform value and map to -1/+1 range, then convert to 0/1 for lookup
        value = (value-(1<<26))<<1;
        float frac_value = ((float)value / 0x00200000);
        float norm_value = frac_value / 64.0f;
        
        // Clamp to -1.0 to 1.0 range
        if (norm_value < -1.0f) norm_value = -1.0f;
        if (norm_value > 1.0f) norm_value = 1.0f;
        
        // Convert from -1/+1 to 0/1 range for lookup
        lookup_pos = (norm_value + 1.0f) / 2.0f;
    } else {
        // Unipolar: map 0 to max_value directly to 0/1 range for full circle coverage
        float max_value = (1<<27);  // 134217728
        lookup_pos = (float)value / max_value;
        
        // Clamp to 0.0 to 1.0 range
        if (lookup_pos < 0.0f) lookup_pos = 0.0f;
        if (lookup_pos > 1.0f) lookup_pos = 1.0f;
    }
    
    // Map to indicator positions
    int indicator_index = (int)(lookup_pos * 30 + 0.5f);
    if (indicator_index < 0) indicator_index = 0;
    if (indicator_index >= 31) indicator_index = 30;
    
    // Store knob data in object table for rendering
    // Type 99 = regular knob, Type 100 = bipolar knob with +/- indicators
    int knob_type = dial->is_bipolar ? 100 : 99;
    object_table->array[dial->box_object_id][object_table->FIELD_TYPE] = knob_type;
    object_table->array[dial->box_object_id][object_table->FIELD_X] = cx;    // Center X
    object_table->array[dial->box_object_id][object_table->FIELD_Y] = cy;    // Center Y
    object_table->array[dial->box_object_id][object_table->FIELD_W] = indicator_index; // Store indicator position
    object_table->array[dial->box_object_id][object_table->FIELD_H] = dial->width;     // Store dial width for bounds
    object_table->array[dial->box_object_id][object_table->FIELD_PAGE] = dial->page;

    // Update label text
    strcpy(text_table->array[dial->label_text_id], dial->label);
}

// NEW: Reuse functions for other object types
void bar_reuse(bar_t* bar, uint8_t position) __attribute__ ((noinline)) {
    // Use shared objects for the specified position
    bar->box_object_id = shared_dial_objects[position];
    bar->label_object_id = shared_label_objects[position];
    bar->label_text_id = shared_label_texts[position];
    
    // Update label object with new data
    object_table->array[bar->label_object_id][object_table->FIELD_TYPE] = 9; // Text center
    object_table->array[bar->label_object_id][object_table->FIELD_X] = bar->x;
    object_table->array[bar->label_object_id][object_table->FIELD_Y] = bar->y + bar->height - 11;
    object_table->array[bar->label_object_id][object_table->FIELD_W] = bar->width;
    object_table->array[bar->label_object_id][object_table->FIELD_H] = 8;
    object_table->array[bar->label_object_id][object_table->FIELD_COLOR] = 2;
    object_table->array[bar->label_object_id][object_table->FIELD_TEXT_ID] = bar->label_text_id;
    object_table->array[bar->label_object_id][object_table->FIELD_PAGE] = bar->page;
    
    // Update label text
    strcpy(text_table->array[bar->label_text_id], bar->label);
    
    // Force update
    bar->last_value = -999999;
}

void intdisplay_reuse(intdisplay_t* display, uint8_t position) __attribute__ ((noinline)) {
    // Use shared objects for the specified position
    display->box_object_id = shared_dial_objects[position];
    display->label_object_id = shared_label_objects[position];
    display->label_text_id = shared_label_texts[position];
    
    // Update label object with new data
    object_table->array[display->label_object_id][object_table->FIELD_TYPE] = 9; // Text center
    object_table->array[display->label_object_id][object_table->FIELD_X] = display->x;
    object_table->array[display->label_object_id][object_table->FIELD_Y] = display->y + display->height - 11;
    object_table->array[display->label_object_id][object_table->FIELD_W] = display->width;
    object_table->array[display->label_object_id][object_table->FIELD_H] = 8;
    object_table->array[display->label_object_id][object_table->FIELD_COLOR] = 2;
    object_table->array[display->label_object_id][object_table->FIELD_TEXT_ID] = display->label_text_id;
    object_table->array[display->label_object_id][object_table->FIELD_PAGE] = display->page;
    
    // Update label text
    strcpy(text_table->array[display->label_text_id], display->label);
    
    // Force update
    display->last_value = -999999;
}

void select_reuse(select_t* select, uint8_t position) __attribute__ ((noinline)) {
    // Use shared objects for the specified position
    select->box_object_id = shared_dial_objects[position];
    select->label_object_id = shared_label_objects[position];
    select->label_text_id = shared_label_texts[position];
    
    // Update label object with new data
    object_table->array[select->label_object_id][object_table->FIELD_TYPE] = 9; // Text center
    object_table->array[select->label_object_id][object_table->FIELD_X] = select->x;
    object_table->array[select->label_object_id][object_table->FIELD_Y] = select->y + select->height - 11;
    object_table->array[select->label_object_id][object_table->FIELD_W] = select->width;
    object_table->array[select->label_object_id][object_table->FIELD_H] = 8;
    object_table->array[select->label_object_id][object_table->FIELD_COLOR] = 2;
    object_table->array[select->label_object_id][object_table->FIELD_TEXT_ID] = select->label_text_id;
    object_table->array[select->label_object_id][object_table->FIELD_PAGE] = select->page;
    
    // Update label text
    strcpy(text_table->array[select->label_text_id], select->label);
    
    // Force update
    select->last_value = -999999;
}

// Compatibility functions for other object types (keep for backward compatibility)
void intdisplay_init(intdisplay_t* display) __attribute__ ((noinline)) {
    // Use shared objects - calculate position from coordinates
    uint8_t position = 0;
    const uint8_t COL_X[4] = {26, 52, 78, 104};
    const uint8_t ROW1_Y = 13;
    const uint8_t ROW2_Y = 39;
    
    for (int i = 0; i < 4; i++) {
        if (display->x == COL_X[i]) {
            position = i;
            break;
        }
    }
    if (display->y >= ROW2_Y) {
        position += 4; // Second row
    }
    
    intdisplay_reuse(display, position);
}

void intdisplay_update(intdisplay_t* display) __attribute__ ((noinline)) {
    int32_t value = param_table->array[display->page][display->param];

    if (value == display->last_value) return;
    display->last_value = value;

    // Convert to integer and display
    float frac_value = ((float)value / 0x00200000);
    int rounded = (int)(frac_value + 0.5f);
    
    char value_str[16];
    sprintf(value_str, "%d", rounded);
    strcpy(text_table->array[display->label_text_id], value_str);
}

void select_init(select_t* select) __attribute__ ((noinline)) {
    // Use shared objects - calculate position from coordinates
    uint8_t position = 0;
    const uint8_t COL_X[4] = {26, 52, 78, 104};
    const uint8_t ROW1_Y = 13;
    const uint8_t ROW2_Y = 39;
    
    for (int i = 0; i < 4; i++) {
        if (select->x == COL_X[i]) {
            position = i;
            break;
        }
    }
    if (select->y >= ROW2_Y) {
        position += 4; // Second row
    }
    
    select_reuse(select, position);
}

void select_update(select_t* select) __attribute__ ((noinline)) {
    int32_t value = param_table->array[select->page][select->param];

    if (value == select->last_value) return;
    select->last_value = value;

    // Simple display - just show the label
    strcpy(text_table->array[select->label_text_id], select->label);
}

void bar_init(bar_t* bar) __attribute__ ((noinline)) {
    // Use shared objects - calculate position from coordinates
    uint8_t position = 0;
    const uint8_t COL_X[4] = {26, 52, 78, 104};
    const uint8_t ROW1_Y = 13;
    const uint8_t ROW2_Y = 39;
    
    for (int i = 0; i < 4; i++) {
        if (bar->x == COL_X[i]) {
            position = i;
            break;
        }
    }
    if (bar->y >= ROW2_Y) {
        position += 4; // Second row
    }
    
    bar_reuse(bar, position);
}

void bar_update(bar_t* bar) __attribute__ ((noinline)) {
    int32_t value = param_table->array[bar->page][bar->param];
    
    if (value == bar->last_value) return;
    bar->last_value = value;
    
    // Simple display - just show the label
    strcpy(text_table->array[bar->label_text_id], bar->label);
}

// Helper functions for pager compatibility
int count_tokens(const char* str, char delimiter) {
    if (!str) return 0;
    int count = 1;
    while (*str) {
        if (*str == delimiter) count++;
        str++;
    }
    return count;
}

const char* get_token_at_index(const char* str, int index) {
    static char token_buffer[32];
    if (!str) return "";
    
    int current_index = 0;
    const char* start = str;
    const char* end = str;
    
    while (*end && current_index < index) {
        if (*end == ',') {
            current_index++;
            start = end + 1;
        }
        end++;
    }
    
    while (*end && *end != ',') {
        end++;
    }
    
    int len = end - start;
    if (len >= 31) len = 30;
    strncpy(token_buffer, start, len);
    token_buffer[len] = '\0';
    return token_buffer;
}

int getCurrentPage() {
    return page;
}

static msg_t ThreadX(void *arg) {
    ((attr_parent *)arg)->ThreadX2();
}

static THD_WORKING_AREA(waThreadX, 512);
Thread *Thd;]]></code.declaration>
      <code.init><![CDATA[object_table = &parent->instancesketchy__objects_i;
text_table = &parent->instancesketchy__texts_i;
param_table = &parent->instancesketchy__params_i;
font = &parent->instancesketchy__font_i;

palSetPadMode(GPIOB, 8, PAL_MODE_ALTERNATE(4)|PAL_STM32_PUDR_PULLUP|PAL_STM32_OTYPE_OPENDRAIN);
palSetPadMode(GPIOB, 9, PAL_MODE_ALTERNATE(4)|PAL_STM32_PUDR_PULLUP|PAL_STM32_OTYPE_OPENDRAIN);
static const I2CConfig i2cfg = {
    OPMODE_I2C,
    400000,
    FAST_DUTY_CYCLE_2,
};
i2cStart(&I2CD1, &i2cfg);
Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);

clear();

// Initialize shared objects
init_shared_objects();

pprint = false;
page = 0;
layout = 0xFFFF;]]></code.init>
      <code.dispose><![CDATA[chThdTerminate( Thd );
chThdWait( Thd );
i2cStop(&I2CD1);
palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_ANALOG);]]></code.dispose>
      <code.krate><![CDATA[if (inlet_print && !pprint) {
    pprint = true;
	for (uint8_t i = 0; i < parent->instancesketchy__objects_i.LENGTH; i++) {
		LogTextMessage(
			"i: %3d, type: %3d, x: %3d, y: %3d, w: %3d, h: %3d, color: %3d, text_id: %3d",
			i,
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TYPE],
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_X], 
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_Y], 
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_W],
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_H], 
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_COLOR],
			parent->instancesketchy__objects_i.array[i][parent->instancesketchy__objects_i.FIELD_TEXT_ID]
		);
	}
	LogTextMessage("");
}

if (!inlet_print && pprint) {
    pprint = false;
}

if (page != inlet_page) {
    page = inlet_page;
}
if (layout != inlet_layout) {
    layout = inlet_layout;
}

outlet_sw = LCDWIDTH;
outlet_sh = LCDHEIGHT;]]></code.krate>
   </obj.normal>
</objdefs> 