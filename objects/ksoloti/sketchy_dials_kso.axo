<objdefs appVersion="1.0.12">
   <obj.normal id="sketchy_dials_exp" uuid="90f089f4-f31d-48c4-9e1b-1645d829a998">
      <sDescription>Dial configuration with configurable page count. Drop-in replacement for sketchy_dials with attribute to set maximum pages (8-64).</sDescription>
      <author>AI Assistant</author>
      <license>BSD</license>
      <helpPatch>logic.axh</helpPatch>
      <inlets>
         <int32 name="page"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <spinner name="maxpages" description="Maximum number of pages (8-64)" MinValue="8" MaxValue="64" DefaultValue="8"/>
      </attribs>
      <depends>
         <depend>sketchy_font</depend>
         <depend>sketchy_params</depend>
         <depend>sketchy_objects</depend>
         <depend>sketchy_texts</depend>
         <depend>sketchy_render</depend>
      </depends>
      <code.declaration><![CDATA[// Dial configuration structure
typedef struct {
    uint8_t mode;           // 0=frac unipolar, 1=frac bipolar, 2=int, 3=list, 4=bar unipolar, 5=bar bipolar, 6=duplicate
    bool show_value;        // Show/hide value (for fractional modes)
    const char* label;      // Label text
    const char* options;    // List options (for mode 3) OR duplicate reference "page,dial" (for mode 6)
    float default_value;    // Default value
    int16_t int_min;        // Minimum value (for int/list modes)
    int16_t int_max;        // Maximum value (for int/list modes)
} encoder_dial_config_t;

// Configuration storage - MOVED TO SDRAM to save SRAM
encoder_dial_config_t (*configs)[8];

// Mode constants
#define MODE_FRAC_UNIPOLAR 0  // 0.0 to 1.0, positive only
#define MODE_FRAC_BIPOLAR  1  // -1.0 to 1.0, bipolar
#define MODE_INT           2  // min to max, integer
#define MODE_LIST          3  // selector mode
#define MODE_BAR_UNIPOLAR  4  // 0.0 to 1.0, vertical bar
#define MODE_BAR_BIPOLAR   5  // -1.0 to 1.0, vertical bar
#define MODE_DUPLICATE     6  // duplicate another parameter
#define MODE_EMPTY         255 // empty/unconfigured - no display object created

// Display structures for each type - variable total (pages x 8 dials)
// Using SDRAM to save precious SRAM
rootc::objectinstance_sketchy__render::dial_t *dials;
rootc::objectinstance_sketchy__render::intdisplay_t *intdisplays;
rootc::objectinstance_sketchy__render::select_t *selects;
rootc::objectinstance_sketchy__render::bar_t *bars;

// Fixed layout positions
const uint8_t DIAL_WIDTH = 24;
const uint8_t DIAL_HEIGHT = 24;
const uint8_t ROW1_Y = 13;
const uint8_t ROW2_Y = 39;
const uint8_t COL_X[4] = {26, 52, 78, 104};

// Initialize configuration data in SDRAM - MOVED TO INIT CODE
// This function now populates the SDRAM shadow array directly

// Convert from display value to encoder position (0-1)
float displayToEncoderValue(float displayValue, int mode) {
    switch(mode) {
        case MODE_FRAC_UNIPOLAR:
        case MODE_BAR_UNIPOLAR:
            // 0-64 display maps to 0-1 encoder
            return displayValue / 64.0f;
        case MODE_FRAC_BIPOLAR:
        case MODE_BAR_BIPOLAR:
            // -64 to +64 display maps to 0-1 encoder (-64 = 0.0, 0 = 0.5, +64 = 1.0)
            return (displayValue + 64.0f) / 128.0f;
        case MODE_INT:
        case MODE_LIST:
            // Not used for these modes
            return 0.0f;
        default:
            return displayValue;
    }
}

// Parse duplicate reference "page,dial" into page and dial indices
void parse_duplicate_reference(const char* options, uint8_t* ref_page, uint8_t* ref_dial) {
    *ref_page = 0;
    *ref_dial = 0;
    
    // Simple parsing: expect "page,dial" format
    if (options && strlen(options) >= 3) {
        *ref_page = options[0] - '0';  // Convert first char to number
        if (options[1] == ',' && options[2] >= '0' && options[2] <= '7') {
            *ref_dial = options[2] - '0';  // Convert third char to number
        }
    }
}

// Initialize a single dial based on its configuration
void init_dial(uint8_t page, uint8_t dial_index, const encoder_dial_config_t* config) {
    uint8_t array_index = page * 8 + dial_index;
    
    // Bounds check to prevent buffer overflow
    if (array_index >= (attr_maxpages * 8)) {
        return;  // Skip if out of bounds
    }
    
    float encoder_pos;  // Declare variable outside switch
    
    switch (config->mode) {
        case MODE_EMPTY:
            // Skip creating any display objects for empty/unconfigured elements
            return;
            
        case MODE_FRAC_UNIPOLAR:
        case MODE_FRAC_BIPOLAR:
            dials[array_index].page = page;
            dials[array_index].param = dial_index;
            dials[array_index].is_bipolar = (config->mode == MODE_FRAC_BIPOLAR);
            dials[array_index].x = COL_X[dial_index % 4];
            dials[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            dials[array_index].width = DIAL_WIDTH;
            dials[array_index].height = DIAL_HEIGHT;
            dials[array_index].label = config->label;
            dials[array_index].show_value = config->show_value;
            // Convert config default to encoder position (0-1), then to display format for renderer
            encoder_pos = displayToEncoderValue(config->default_value, config->mode);
            if (encoder_pos < 0.0f) encoder_pos = 0.0f;
            if (encoder_pos > 1.0f) encoder_pos = 1.0f;
            dials[array_index].default_value = (int32_t)(encoder_pos * (float)(1 << 27));
            parent->objectinstance_sketchy__render_i.dial_init(&dials[array_index]);
            break;
            
        case MODE_BAR_UNIPOLAR:
        case MODE_BAR_BIPOLAR:
            bars[array_index].page = page;
            bars[array_index].param = dial_index;
            bars[array_index].is_bipolar = (config->mode == MODE_BAR_BIPOLAR);
            bars[array_index].x = COL_X[dial_index % 4];
            bars[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            bars[array_index].width = DIAL_WIDTH;
            bars[array_index].height = DIAL_HEIGHT;
            bars[array_index].label = config->label;
            bars[array_index].show_value = config->show_value;
            // Convert config default to encoder position (0-1), then to display format for renderer
            encoder_pos = displayToEncoderValue(config->default_value, config->mode);
            if (encoder_pos < 0.0f) encoder_pos = 0.0f;
            if (encoder_pos > 1.0f) encoder_pos = 1.0f;
            bars[array_index].default_value = (int32_t)(encoder_pos * (float)(1 << 27));
            parent->objectinstance_sketchy__render_i.bar_init(&bars[array_index]);
            break;
            
        case MODE_INT:
            intdisplays[array_index].page = page;
            intdisplays[array_index].param = dial_index;
            intdisplays[array_index].x = COL_X[dial_index % 4];
            intdisplays[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            intdisplays[array_index].width = DIAL_WIDTH;
            intdisplays[array_index].height = DIAL_HEIGHT;
            intdisplays[array_index].label = config->label;
            parent->objectinstance_sketchy__render_i.intdisplay_init(&intdisplays[array_index]);
            break;
            
        case MODE_LIST:
            selects[array_index].page = page;
            selects[array_index].param = dial_index;
            selects[array_index].x = COL_X[dial_index % 4];
            selects[array_index].y = (dial_index < 4) ? ROW1_Y : ROW2_Y;
            selects[array_index].width = DIAL_WIDTH;
            selects[array_index].height = DIAL_HEIGHT;
            selects[array_index].is_int = true;
            selects[array_index].param_label = config->label;  // Parameter name
            selects[array_index].options = config->options;    // Options list
            parent->objectinstance_sketchy__render_i.select_init(&selects[array_index]);
            break;
            
        case MODE_DUPLICATE:
            // Parse the duplicate reference from options field: "page,dial"
            uint8_t ref_page, ref_dial;
            parse_duplicate_reference(config->options, &ref_page, &ref_dial);
            
            // Get the referenced configuration and initialize with it
            if (ref_page < attr_maxpages && ref_dial < 8) {
                const encoder_dial_config_t* ref_config = &configs[ref_page][ref_dial];
                
                // Avoid infinite recursion - don't duplicate another duplicate
                if (ref_config->mode != MODE_DUPLICATE) {
                    // Initialize this dial with the referenced config's mode
                    encoder_dial_config_t temp_config = *ref_config;
                    init_dial(page, dial_index, &temp_config);
                    
                    // Override the param and page to point to the same parameter as the original
                    switch (temp_config.mode) {
                        case MODE_FRAC_UNIPOLAR:
                        case MODE_FRAC_BIPOLAR:
                            dials[array_index].param = ref_dial;  // Point to original param
                            dials[array_index].page = ref_page;   // Point to original page
                            break;
                        case MODE_BAR_UNIPOLAR:
                        case MODE_BAR_BIPOLAR:
                            bars[array_index].param = ref_dial;   // Point to original param
                            bars[array_index].page = ref_page;    // Point to original page
                            break;
                        case MODE_INT:
                            intdisplays[array_index].param = ref_dial;  // Point to original param
                            intdisplays[array_index].page = ref_page;   // Point to original page
                            break;
                        case MODE_LIST:
                            selects[array_index].param = ref_dial;     // Point to original param
                            selects[array_index].page = ref_page;      // Point to original page
                            break;
                    }
                }
            }
            break;
    }
}

// Update a single dial based on its configuration
void update_dial(uint8_t page, uint8_t dial_index, const encoder_dial_config_t* config) {
    uint8_t array_index = page * 8 + dial_index;
    
    // Bounds check to prevent buffer overflow
    if (array_index >= (attr_maxpages * 8)) {
        return;  // Skip if out of bounds
    }
    
    switch (config->mode) {
        case MODE_EMPTY:
            // Skip updating empty/unconfigured elements
            return;
            
        case MODE_FRAC_UNIPOLAR:
        case MODE_FRAC_BIPOLAR:
            parent->objectinstance_sketchy__render_i.dial_update(&dials[array_index]);
            break;
            
        case MODE_BAR_UNIPOLAR:
        case MODE_BAR_BIPOLAR:
            parent->objectinstance_sketchy__render_i.bar_update(&bars[array_index]);
            break;
            
        case MODE_INT:
            parent->objectinstance_sketchy__render_i.intdisplay_update(&intdisplays[array_index]);
            break;
            
        case MODE_LIST:
            parent->objectinstance_sketchy__render_i.select_update(&selects[array_index]);
            break;
            
        case MODE_DUPLICATE:
            // Parse the duplicate reference and update with the referenced config
            uint8_t ref_page, ref_dial;
            parse_duplicate_reference(config->options, &ref_page, &ref_dial);
            
            if (ref_page < attr_maxpages && ref_dial < 8) {
                const encoder_dial_config_t* ref_config = &configs[ref_page][ref_dial];
                
                // Avoid infinite recursion - don't duplicate another duplicate
                if (ref_config->mode != MODE_DUPLICATE) {
                    // Update this dial with the referenced config's mode
                    switch (ref_config->mode) {
                        case MODE_FRAC_UNIPOLAR:
                        case MODE_FRAC_BIPOLAR:
                            parent->objectinstance_sketchy__render_i.dial_update(&dials[array_index]);
                            break;
                        case MODE_BAR_UNIPOLAR:
                        case MODE_BAR_BIPOLAR:
                            parent->objectinstance_sketchy__render_i.bar_update(&bars[array_index]);
                            break;
                        case MODE_INT:
                            parent->objectinstance_sketchy__render_i.intdisplay_update(&intdisplays[array_index]);
                            break;
                        case MODE_LIST:
                            parent->objectinstance_sketchy__render_i.select_update(&selects[array_index]);
                            break;
                    }
                }
            }
            break;
    }
}

// Initialize param table with default values
void init_param_table() {
    rootc::objectinstance_sketchy__params* param_table = &parent->objectinstance_sketchy__params_i;
    
    for (int page = 0; page < attr_maxpages; page++) {
        for (int enc = 0; enc < 8; enc++) {
            const encoder_dial_config_t* config = &configs[page][enc];
            
            if (config->mode == MODE_EMPTY) {
                // Initialize empty/unconfigured elements to 0
                param_table->array[page][enc] = 0;
            } else if (config->mode == MODE_INT || config->mode == MODE_LIST) {
                // Initialize integer/list modes to their default values (clamped to range)
                int default_int = (int)config->default_value;
                if (default_int < config->int_min) default_int = config->int_min;
                if (default_int > config->int_max) default_int = config->int_max;
                param_table->array[page][enc] = default_int;
            } else {
                // Initialize fractional modes (knobs): store encoder position (0-1) directly
                float encoder_pos = displayToEncoderValue(config->default_value, config->mode);
                if (encoder_pos < 0.0f) encoder_pos = 0.0f;
                if (encoder_pos > 1.0f) encoder_pos = 1.0f;
                param_table->array[page][enc] = (int32_t)(encoder_pos * (float)(1 << 27));
            }
        }
    }
}
]]>
</code.declaration>
      <code.init><![CDATA[// Create SDRAM shadow arrays for display structures - use maximum size (64 pages * 8 = 512 dials)
static rootc::objectinstance_sketchy__render::dial_t _dials[512] __attribute__ ((section (".sdram")));
static rootc::objectinstance_sketchy__render::intdisplay_t _intdisplays[512] __attribute__ ((section (".sdram")));
static rootc::objectinstance_sketchy__render::select_t _selects[512] __attribute__ ((section (".sdram")));
static rootc::objectinstance_sketchy__render::bar_t _bars[512] __attribute__ ((section (".sdram")));

// SDRAM STRATEGY: Create shadow array for configuration data - use maximum size
static encoder_dial_config_t _configs[64][8] __attribute__ ((section (".sdram")));

// Point pointers to SDRAM arrays
dials = &_dials[0];
intdisplays = &_intdisplays[0];
selects = &_selects[0];
bars = &_bars[0];
configs = _configs;  // Point configs to SDRAM array

// Initialize configuration data directly in SDRAM shadow array
// PAGE 0 - Oscillator controls
configs[0][0] = (encoder_dial_config_t){1, true,  "FIN", "", 0.0f, 0, 127};
configs[0][1] = (encoder_dial_config_t){1, true,  "WAV", "", 32.0f, 0, 127};
configs[0][2] = (encoder_dial_config_t){3, false, "SEL", "Sin,Tri,Saw,Sqr,Nse", 2.0f, 0, 4};
configs[0][3] = (encoder_dial_config_t){5, true,  "DOT", "", 32.0f, 0, 127};
configs[0][4] = (encoder_dial_config_t){0, false, "DET", "", 0.0f, 0, 127};
configs[0][5] = (encoder_dial_config_t){0, false, "SUB", "", 0.0f, 0, 127};
configs[0][6] = (encoder_dial_config_t){2, false, "OCT", "", 0.0f, -4, 4};
configs[0][7] = (encoder_dial_config_t){4, false, "DOWN", "", 0.0f, 0, 127};

// PAGE 1 - Filter controls
configs[1][0] = (encoder_dial_config_t){0, true,  "CUT", "", 32.0f, 0, 127};
configs[1][1] = (encoder_dial_config_t){1, true,  "RES", "", 0.0f, 0, 127};
configs[1][2] = (encoder_dial_config_t){1, false, "ENV", "", 0.0f, -64, 64};
configs[1][3] = (encoder_dial_config_t){3, false, "TYP", "LP,HP,BP,BR", 0.0f, 0, 3};
configs[1][4] = (encoder_dial_config_t){0, false, "KBD", "", 16.0f, 0, 127};
configs[1][5] = (encoder_dial_config_t){0, false, "VEL", "", 0.0f, 0, 127};
configs[1][6] = (encoder_dial_config_t){0, false, "LFO", "", 0.0f, 0, 127};
configs[1][7] = (encoder_dial_config_t){2, false, "DRV", "", 8.0f, 0, 100};

// PAGE 2 - Envelope controls
configs[2][0] = (encoder_dial_config_t){0, false, "ATK", "", 8.0f, 0, 127};
configs[2][1] = (encoder_dial_config_t){0, false, "DEC", "", 16.0f, 0, 127};
configs[2][2] = (encoder_dial_config_t){0, false, "SUS", "", 48.0f, 0, 127};
configs[2][3] = (encoder_dial_config_t){0, false, "REL", "", 24.0f, 0, 127};
configs[2][4] = (encoder_dial_config_t){1, false, "VEL", "", 0.0f, -100, 100};
configs[2][5] = (encoder_dial_config_t){1, false, "CRV", "", 0.0f, -50, 50};
configs[2][6] = (encoder_dial_config_t){0, false, "TIM", "", 32.0f, 0, 127};
configs[2][7] = (encoder_dial_config_t){3, false, "TYP", "Lin,Exp,Log", 1.0f, 0, 2};

// PAGE 3 - LFO controls
configs[3][0] = (encoder_dial_config_t){0, true,  "RAT", "", 16.0f, 0, 127};
configs[3][1] = (encoder_dial_config_t){1, false, "DEP", "", 0.0f, -127, 127};
configs[3][2] = (encoder_dial_config_t){1, false, "PHS", "", 0.0f, -127, 127};
configs[3][3] = (encoder_dial_config_t){3, false, "SHP", "Sin,Tri,Saw,Sqr,S&H", 1.0f, 0, 4};
configs[3][4] = (encoder_dial_config_t){0, false, "SYN", "", 0.0f, 0, 127};
configs[3][5] = (encoder_dial_config_t){0, false, "DEL", "", 0.0f, 0, 127};
configs[3][6] = (encoder_dial_config_t){0, false, "FAD", "", 0.0f, 0, 127};
configs[3][7] = (encoder_dial_config_t){2, false, "DIV", "", 8.0f, 1, 32};

// PAGE 4 - Effects controls
configs[4][0] = (encoder_dial_config_t){0, false, "REV", "", 16.0f, 0, 127};
configs[4][1] = (encoder_dial_config_t){0, false, "DEL", "", 0.0f, 0, 127};
configs[4][2] = (encoder_dial_config_t){0, false, "CHO", "", 0.0f, 0, 127};
configs[4][3] = (encoder_dial_config_t){0, false, "DIS", "", 0.0f, 0, 127};
configs[4][4] = (encoder_dial_config_t){1, false, "TIM", "", 0.0f, -64, 64};
configs[4][5] = (encoder_dial_config_t){1, false, "FBK", "", 0.0f, -100, 100};
configs[4][6] = (encoder_dial_config_t){0, false, "MIX", "", 32.0f, 0, 127};
configs[4][7] = (encoder_dial_config_t){3, false, "TYP", "Off,Hall,Room,Plate", 2.0f, 0, 3};

// PAGE 5 - Sequencer controls
configs[5][0] = (encoder_dial_config_t){2, true,  "STP", "", 8.0f, 1, 64};
configs[5][1] = (encoder_dial_config_t){0, true,  "SPD", "", 32.0f, 0, 127};
configs[5][2] = (encoder_dial_config_t){1, false, "SWG", "", 0.0f, -50, 50};
configs[5][3] = (encoder_dial_config_t){3, false, "DIR", "Fwd,Rev,P-P,Rnd", 0.0f, 0, 3};
configs[5][4] = (encoder_dial_config_t){0, false, "GAT", "", 48.0f, 0, 127};
configs[5][5] = (encoder_dial_config_t){1, false, "ACC", "", 0.0f, -127, 127};
configs[5][6] = (encoder_dial_config_t){0, false, "SLD", "", 0.0f, 0, 127};
configs[5][7] = (encoder_dial_config_t){2, false, "RST", "", 0.0f, 0, 1};

// PAGE 6 - Modulation controls
configs[6][0] = (encoder_dial_config_t){1, false, "M1A", "", 0.0f, -127, 127};
configs[6][1] = (encoder_dial_config_t){1, false, "M2A", "", 0.0f, -127, 127};
configs[6][2] = (encoder_dial_config_t){1, false, "M3A", "", 0.0f, -127, 127};
configs[6][3] = (encoder_dial_config_t){3, false, "SRC", "LFO,ENV,VEL,RND", 0.0f, 0, 3};
configs[6][4] = (encoder_dial_config_t){3, false, "DS1", "Cut,Res,Amp,Pan", 0.0f, 0, 3};
configs[6][5] = (encoder_dial_config_t){3, false, "DS2", "Pit,Phs,PWM,FM", 0.0f, 0, 3};
configs[6][6] = (encoder_dial_config_t){0, false, "ATN", "", 64.0f, 0, 127};
configs[6][7] = (encoder_dial_config_t){2, false, "LAG", "", 0.0f, 0, 100};

// PAGE 7 - Global controls
configs[7][0] = (encoder_dial_config_t){0, true,  "VOL", "", 48.0f, 0, 127};
configs[7][1] = (encoder_dial_config_t){1, false, "PAN", "", 0.0f, -64, 64};
configs[7][2] = (encoder_dial_config_t){0, false, "TUN", "", 32.0f, 0, 127};
configs[7][3] = (encoder_dial_config_t){2, true,  "TRS", "", 0.0f, -24, 24};
configs[7][4] = (encoder_dial_config_t){0, false, "VEL", "", 48.0f, 0, 127};
configs[7][5] = (encoder_dial_config_t){0, false, "POR", "", 0.0f, 0, 127};
configs[7][6] = (encoder_dial_config_t){2, false, "CHN", "", 1.0f, 1, 16};
configs[7][7] = (encoder_dial_config_t){3, false, "PLY", "Poly,Mono,Leg", 0.0f, 0, 2};

// PAGE 8 - Custom page (example from your patch)
configs[8][0] = (encoder_dial_config_t){0, true,  "BOL", "", 48.0f, 0, 127};
configs[8][1] = (encoder_dial_config_t){1, false, "AAN", "", 0.0f, -64, 64};
configs[8][2] = (encoder_dial_config_t){0, false, "TUN", "", 32.0f, 0, 127};
configs[8][3] = (encoder_dial_config_t){2, true,  "TRS", "", 0.0f, -24, 24};
configs[8][4] = (encoder_dial_config_t){0, false, "VEL", "", 48.0f, 0, 127};
configs[8][5] = (encoder_dial_config_t){0, false, "POR", "", 0.0f, 0, 127};
configs[8][6] = (encoder_dial_config_t){2, false, "CHN", "", 1.0f, 1, 16};
configs[8][7] = (encoder_dial_config_t){3, false, "PLY", "Poly,Mono,Leg", 0.0f, 0, 2};

// PAGE 9 - Modulation Matrix
configs[9][0] = (encoder_dial_config_t){3, false, "SRC", "LFO1,LFO2,ENV1,ENV2", 0.0f, 0, 3};
configs[9][1] = (encoder_dial_config_t){3, false, "DST", "Pitch,Filter,Amp,Pan", 0.0f, 0, 3};
configs[9][2] = (encoder_dial_config_t){1, true,  "AMT", "", 0.0f, -64, 64};
configs[9][3] = (encoder_dial_config_t){0, false, "CRV", "", 32.0f, 0, 127};
configs[9][4] = (encoder_dial_config_t){4, true,  "DEP", "", 0.0f, 0, 127};
configs[9][5] = (encoder_dial_config_t){5, true,  "MIX", "", 0.0f, -64, 64};
configs[9][6] = (encoder_dial_config_t){2, false, "LAG", "", 0.0f, 0, 127};
configs[9][7] = (encoder_dial_config_t){0, true,  "GAI", "", 64.0f, 0, 127};

// PAGE 10 - Sequencer Controls
configs[10][0] = (encoder_dial_config_t){2, false, "STP", "", 16.0f, 1, 32};
configs[10][1] = (encoder_dial_config_t){0, true,  "SPD", "", 32.0f, 0, 127};
configs[10][2] = (encoder_dial_config_t){3, false, "DIR", "Fwd,Rev,PnP,Rnd", 0.0f, 0, 3};
configs[10][3] = (encoder_dial_config_t){2, true,  "SWG", "", 0.0f, -12, 12};
configs[10][4] = (encoder_dial_config_t){4, false, "GAT", "", 75.0f, 0, 127};
configs[10][5] = (encoder_dial_config_t){5, true,  "SLD", "", 0.0f, -64, 64};
configs[10][6] = (encoder_dial_config_t){0, false, "ACC", "", 0.0f, 0, 127};
configs[10][7] = (encoder_dial_config_t){2, false, "RST", "", 0.0f, 0, 16};

// PAGE 11 - Effects Send/Return
configs[11][0] = (encoder_dial_config_t){0, true,  "SND", "", 0.0f, 0, 127};
configs[11][1] = (encoder_dial_config_t){0, true,  "RTN", "", 32.0f, 0, 127};
configs[11][2] = (encoder_dial_config_t){1, true,  "FBK", "", 0.0f, -64, 64};
configs[11][3] = (encoder_dial_config_t){3, false, "TYP", "Rev,Del,Cho,Fla", 0.0f, 0, 3};
configs[11][4] = (encoder_dial_config_t){4, true,  "WET", "", 25.0f, 0, 127};
configs[11][5] = (encoder_dial_config_t){5, true,  "DRY", "", 100.0f, 0, 127};
configs[11][6] = (encoder_dial_config_t){0, false, "PRE", "", 0.0f, 0, 127};
configs[11][7] = (encoder_dial_config_t){2, false, "PST", "", 127.0f, 0, 127};

// PAGE 12 - Arpeggiator
configs[12][0] = (encoder_dial_config_t){3, false, "MOD", "Up,Dn,UpDn,Rnd", 0.0f, 0, 3};
configs[12][1] = (encoder_dial_config_t){2, false, "OCT", "", 1.0f, 1, 4};
configs[12][2] = (encoder_dial_config_t){0, true,  "RAT", "", 64.0f, 0, 127};
configs[12][3] = (encoder_dial_config_t){2, false, "GAT", "", 75.0f, 0, 100};
configs[12][4] = (encoder_dial_config_t){4, true,  "SWG", "", 0.0f, 0, 127};
configs[12][5] = (encoder_dial_config_t){5, true,  "VEL", "", 0.0f, -64, 64};
configs[12][6] = (encoder_dial_config_t){0, false, "LAT", "", 0.0f, 0, 127};
configs[12][7] = (encoder_dial_config_t){2, true,  "TRA", "", 0.0f, -24, 24};

// PAGE 13 - Performance Controls
configs[13][0] = (encoder_dial_config_t){0, true,  "X", "", 64.0f, 0, 127};
configs[13][1] = (encoder_dial_config_t){0, true,  "Y", "", 64.0f, 0, 127};
configs[13][2] = (encoder_dial_config_t){1, true,  "Z", "", 0.0f, -64, 64};
configs[13][3] = (encoder_dial_config_t){0, true,  "W", "", 0.0f, 0, 127};
configs[13][4] = (encoder_dial_config_t){4, true,  "XY", "", 64.0f, 0, 127};
configs[13][5] = (encoder_dial_config_t){5, true,  "ZW", "", 0.0f, -64, 64};
configs[13][6] = (encoder_dial_config_t){0, false, "LCK", "", 0.0f, 0, 1};
configs[13][7] = (encoder_dial_config_t){3, false, "SCL", "Lin,Log,Exp,S", 0.0f, 0, 3};

// PAGE 14 - MIDI/CV Controls
configs[14][0] = (encoder_dial_config_t){2, false, "CHN", "", 1.0f, 1, 16};
configs[14][1] = (encoder_dial_config_t){2, false, "VEL", "", 127.0f, 0, 127};
configs[14][2] = (encoder_dial_config_t){2, true,  "PIT", "", 0.0f, -8192, 8191};
configs[14][3] = (encoder_dial_config_t){2, false, "CC1", "", 0.0f, 0, 127};
configs[14][4] = (encoder_dial_config_t){4, true,  "CV1", "", 0.0f, 0, 127};
configs[14][5] = (encoder_dial_config_t){5, true,  "CV2", "", 0.0f, -64, 64};
configs[14][6] = (encoder_dial_config_t){0, false, "CLK", "", 96.0f, 1, 192};
configs[14][7] = (encoder_dial_config_t){3, false, "SYN", "Int,Ext,USB,DIN", 0.0f, 0, 3};

// PAGE 15 - System Settings
configs[15][0] = (encoder_dial_config_t){2, false, "BPM", "", 120.0f, 60, 200};
configs[15][1] = (encoder_dial_config_t){2, false, "TUN", "", 440.0f, 415, 465};
configs[15][2] = (encoder_dial_config_t){3, false, "SCL", "Chr,Maj,Min,Dor", 0.0f, 0, 3};
configs[15][3] = (encoder_dial_config_t){2, false, "KEY", "", 0.0f, 0, 11};
configs[15][4] = (encoder_dial_config_t){4, true,  "MST", "", 100.0f, 0, 127};
configs[15][5] = (encoder_dial_config_t){5, true,  "BAL", "", 0.0f, -64, 64};
configs[15][6] = (encoder_dial_config_t){0, false, "SAV", "", 0.0f, 0, 1};
configs[15][7] = (encoder_dial_config_t){0, false, "LOD", "", 0.0f, 0, 1};

// Initialize remaining pages/elements as empty (no display objects created)
// Pages 16+ and any unconfigured elements will remain empty on render
for (int page = 16; page < attr_maxpages; page++) {
    for (int dial = 0; dial < 8; dial++) {
        configs[page][dial] = (encoder_dial_config_t){255, false, "", "", 0.0f, 0, 127}; // mode 255 = empty/unconfigured
    }
}

// Initialize param table with default values
init_param_table();

// Initialize all dials for all pages (like the working sketchy_dials.axo does)
for (uint8_t page = 0; page < attr_maxpages; page++) {
    for (uint8_t dial = 0; dial < 8; dial++) {
        init_dial(page, dial, &configs[page][dial]);
    }
}]]></code.init>
      <code.krate><![CDATA[int page = inlet_page;

// Update displays for current page only
// All encoder processing is now handled by 8encoder_input
if (page >= 0 && page < attr_maxpages) {
    for (uint8_t dial = 0; dial < 8; dial++) {
        uint8_t array_index = page * 8 + dial;
        // Bounds check to prevent buffer overflow
        if (array_index < (attr_maxpages * 8)) {
            const encoder_dial_config_t* config = &configs[page][dial];
            update_dial(page, dial, config);
        }
    }
}]]></code.krate>
   </obj.normal>
</objdefs>